package nc.ui.om.hrdept.view;

import java.util.Date;

import nc.bs.framework.common.NCLocator;
import nc.bs.logging.Logger;
import nc.bs.uif2.BusinessExceptionAdapter;
import nc.desktop.ui.WorkbenchEnvironment;
import nc.hr.utils.PubEnv;
import nc.itf.hr.frame.IHrBillCode;
import nc.itf.uap.rbac.IUserManageQuery;
import nc.pub.billcode.itf.IBillcodeManage;
import nc.pub.billcode.vo.BillCodeContext;
import nc.ui.hr.uif2.view.HrBillFormEditor;
import nc.ui.om.hrdept.model.TreeDeptAppModel;
import nc.ui.om.pub.view.utils.DisplayOrderHelper;
import nc.ui.om.ref.DeptPrincipalRefModel;
import nc.ui.om.ref.HRDeptRefModel;
import nc.ui.pub.beans.UIRefPane;
import nc.ui.pub.bill.BillCardBeforeEditListener;
import nc.ui.pub.bill.BillEditEvent;
import nc.ui.pub.bill.BillEditListener2;
import nc.ui.pub.bill.BillItem;
import nc.ui.pub.bill.BillItemEvent;
import nc.ui.uif2.UIState;
import nc.vo.bd.pub.IPubEnumConst;
import nc.vo.om.hrdept.AggHRDeptVO;
import nc.vo.om.hrdept.DeptHistoryVO;
import nc.vo.om.hrdept.DeptManager;
import nc.vo.om.hrdept.HRDeptVO;
import nc.vo.om.pub.JFCommonValue;
import nc.vo.org.DeptVO;
import nc.vo.org.OrgVO;
import nc.vo.pub.BusinessException;
import nc.vo.pub.BusinessRuntimeException;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDate;
import nc.vo.sm.UserVO;
import nc.vo.sm.enumfactory.UserIdentityTypeEnumFactory;

import org.apache.commons.lang.StringUtils;

/**
 * 卡片界面<br>
 * 
 * @author zhangdd
 */
public class DeptCardForm extends HrBillFormEditor implements BillEditListener2, BillCardBeforeEditListener
{

	/** UID */
	private static final long	serialVersionUID	= 1L;

	private final String		PK_GROUP			= "pk_group";
	private final String		PK_ORG				= "pk_org";
	private final String		PK_FATHERORG		= "pk_fatherorg";

	private UFBoolean			principleflag		= UFBoolean.TRUE;
	
	private TreeDeptAppModel treeAppModel;
	
    private BillCodeContext billCodeContext;
    
    // 自动生成的编码，取消时需要回退.
    // 因为生成之后，用户还有可能修改编码，因此需要储存下来
    private String autoGeneratedCode;    
    
    public String getAutoGeneratedCode() {
        return autoGeneratedCode;
    }

    public void setAutoGeneratedCode(String autoGeneratedCode) {
        this.autoGeneratedCode = autoGeneratedCode;
    }

	public TreeDeptAppModel getTreeAppModel()
    {
        return treeAppModel;
    }

    public void setTreeAppModel(TreeDeptAppModel treeAppModel)
    {
        this.treeAppModel = treeAppModel;
    }

    public UFBoolean getPrincipleflag()
	{
		return principleflag;
	}

	public void setPrincipleflag(UFBoolean principleflag)
	{
		this.principleflag = principleflag;
	}

	@Override
	public void initUI()
	{
		super.initUI();
		getBillCardPanel().addEditListener("deptmanager", this);
		getBillCardPanel().addBodyEditListener2("deptmanager", this);
		getBillCardPanel().setBodyAutoAddLine(false);
		getBillCardPanel().setBodyMenuShow(false);
		getBillCardPanel().setBodyMenuShow("deptmanager", false);
		getBillCardPanel().setBillBeforeEditListenerHeadTail(this);
		String [] strKey = {"approvenum","approvedept"};
		if (null != billCardPanel.getHeadItem(strKey[0])
				&& null != billCardPanel.getHeadItem(strKey[1])) {
			billCardPanel.hideHeadItem(strKey);
		}
	}
	
	@Override
	protected void onNotEdit(){
		super.onNotEdit();
		String [] strKey = {"approvenum","approvedept"};
		if (null != billCardPanel.getHeadItem(strKey[0])
				&& null != billCardPanel.getHeadItem(strKey[1])) {
			billCardPanel.hideHeadItem(strKey);
		}
		billCardPanel.setEnabled(false);
	}

	@Override
	protected void onAdd()
	{
		initRefModel();
		initBillItem();
		super.onAdd();
		String [] strKey = {"approvenum","approvedept"};
		if (null != billCardPanel.getHeadItem(strKey[0])
				&& null != billCardPanel.getHeadItem(strKey[1])) {
			billCardPanel.showHeadItem(strKey);
		}
//		DisplayOrderHelper.setDefaultDisplayOrder(getBillCardPanel(), HRDeptVO.DISPLAYORDER, HRDeptVO.DEFAULT_DISPLAY_ORDER);
		getBillCardPanel().getHeadItem(DeptVO.CREATEDATE).setValue(UFDate.getDate(new Date()));
		setDeptCodeEditState();
	}

	@Override
	protected void onEdit()
	{
		initRefModel();
		initBillItem();
		super.onEdit();
		setDeptCodeEditState();
	}

	private void initRefModel()
	{
		if (getTreeAppModel().getSelectedData() instanceof HRDeptVO)
		{
			HRDeptVO deptVO = (HRDeptVO)  getTreeAppModel().getSelectedData();
			UIRefPane refPane = getHeadRefPane(PK_FATHERORG);
			HRDeptRefModel refModel = new HRDeptRefModel();
			refModel.setPk_org(deptVO.getPk_org());
			refPane.setRefModel(refModel);
			refPane.setPK(deptVO.getPk_fatherorg());

			UIRefPane psnref = (UIRefPane) getBillCardPanel().getHeadItem(HRDeptVO.PRINCIPAL).getComponent();
			psnref.setMultiCorpRef(true);// 表头出现业务单元参照过滤
			psnref.getRefModel().setMatchPkWithWherePart(true);
			psnref.getRefModel().setPk_org(getTreeAppModel().getContext().getPk_group());
			psnref.getRefModel().setPk_group(getTreeAppModel().getContext().getPk_group());
			psnref.getRefModel().addWherePart(" and hi_psnorg.psntype = 0 ");
		}
	}

	private void initBillItem()
	{
		getBillCardPanel().getHeadItem(PK_ORG).getComponent().setEnabled(false);
	}

	@Override
	protected void setDefaultValue()
	{
		super.setDefaultValue();
		// 设置默认集团为当前集团
		getBillCardPanel().getHeadItem(PK_GROUP).setValue(getTreeAppModel().getContext().getPk_group());
		// 设置所属组织为当前选中组织
		Object selectedData = getTreeAppModel().getSelectedData();
		if (selectedData != null && selectedData instanceof HRDeptVO)
		{
			HRDeptVO deptVO = (HRDeptVO) getTreeAppModel().getSelectedData();
			// 设置上级部门
			getBillCardPanel().getHeadItem(PK_FATHERORG).setValue(deptVO.getPk_dept());
		}
		getBillCardPanel().getHeadItem(PK_ORG).setValue(getTreeAppModel().getContext().getPk_org() );
		// 启用标志默认设为Y
		getBillCardPanel().getHeadItem(HRDeptVO.ENABLESTATE).setValue(IPubEnumConst.ENABLESTATE_ENABLE);
		// 设置部门编码
        getBillCardPanel().getHeadItem(HRDeptVO.CODE).setValue(getAutoGeneratedCode());
	}

	@Override
	public boolean beforeEdit(BillItemEvent e)
	{
	    
	    // 上级部门不增加数据权限
//		if (HRDeptVO.PK_FATHERORG.equals(e.getItem().getKey()))
//		{
//			BillItem item = e.getItem();
//			if (item.getComponent() instanceof UIRefPane && ((UIRefPane) item.getComponent()).getRefModel() != null)
//			{
//				String where = "";
//				try
//				{
//					where = NCLocator
//							.getInstance()
//							.lookup(IHRDataPermissionPubService.class)
//							.getDataRefSQLWherePartByMDOperationCode(PubEnv.getPk_user(), PubEnv.getPk_group(), "60050deptinfo",
//									IRefConst.DATAPOWEROPERATION_CODE, "org_dept");
//				}
//				catch (BusinessException ex)
//				{
//					Logger.error(ex.getMessage(), ex);
//				}
//
//				if (StringUtils.isNotBlank(where))
//				{
//					((UIRefPane) item.getComponent()).getRefModel().addWherePart(" and " + where);
//				}
//			}
//		}
		
		//部门信息节点中负责人字段不可选择到已经离职的人员 2014-10-21 yanglt
        if (HRDeptVO.PRINCIPAL.equals(e.getItem().getKey()))
        {
            BillItem item = e.getItem();
            ((UIRefPane) item.getComponent()).getRefModel().addWherePart(" and hi_psnorg.psntype = 0 and hi_psnorg.endflag = 'N' " );
        }else if("dept_charge".equals(e.getItem().getKey())){
        	BillItem item = e.getItem();
        	DeptPrincipalRefModel model = (DeptPrincipalRefModel) ((UIRefPane) item.getComponent()).getRefModel();
        	String pk_dept = (String) getHeadItemValue(HRDeptVO.PK_FATHERORG);
        	model.setPk_dept(pk_dept);
        	model.reset();
        }
		return e.getItem().isEdit();
	}

	@Override
	public boolean beforeEdit(BillEditEvent e)
	{
		if ("pk_psndoc".equals(e.getKey()))
		{
			Boolean isPrincipal = (Boolean) getBillCardPanel().getBillModel().getValueAt(e.getRow(), "principalflag");
			if (Boolean.TRUE.equals(isPrincipal))
			{
				return false;
			}

			UIRefPane psnref = (UIRefPane) getBillCardPanel().getBodyItem(e.getKey()).getComponent();
			String pk_group = WorkbenchEnvironment.getInstance().getGroupVO().getPrimaryKey();
			psnref.getRefModel().setPk_org(pk_group);
			psnref.getRefModel().setPk_group(pk_group);
			psnref.setMultiCorpRef(true);// 表头出现业务单元参照过滤
			psnref.getRefModel().addWherePart(
					" and bd_psndoc.pk_psndoc in (" + "select pk_base_doc from sm_user where base_doc_type = "
							+ UserIdentityTypeEnumFactory.TYPE_PERSON + " AND pk_base_doc <> '~') "
							+ " and hi_psnorg.psntype = 0 and hi_psnorg.endflag = 'N' ");
		}
		return true;
	}

	@Override
	public void afterEdit(BillEditEvent evt)
	{
		super.afterEdit(evt);

		if ("pk_psndoc".equals(evt.getKey()))
		{
			// 人员选择变化后，查询出对应的用户
			getBillCardPanel().getBillModel().setValueAt(null, evt.getRow(), "cuserid");
			String pk_psndoc = (String) getBillCardPanel().getBillModel().getValueAt(evt.getRow(), "pk_psndoc_ID");
			try
			{
				UserVO uservo = getUserManagerQry().queryUserVOByPsnDocID(pk_psndoc);
				if (uservo != null)
				{
					getBillCardPanel().getBillModel().setValueAt(uservo.getCuserid(), evt.getRow(), "cuserid");
				}
				else
				{
					getBillCardPanel().getBillModel().setValueAt(null, evt.getRow(), "cuserid");
				}
			}
			catch (BusinessException e)
			{
				throw new BusinessExceptionAdapter(e);
			}

			getBillCardPanel().getBillModel().loadLoadRelationItemValue();
		}

	}

	@Override
	public void bodyRowChange(BillEditEvent evt)
	{
		if (DeptHistoryVO.BILLCARDNAME.equals(getBillCardPanel().getBillModel().getTabvo().getTabcode()))
		{
			return;
		}
		int row = evt.getRow();
		DeptManager deptManager = (DeptManager) getBillCardPanel().getBillModel().getBodyValueRowVO(row, DeptManager.class.getName());
		principleflag = deptManager.getPrincipalflag();
	}

	@Override
	protected void synchronizeDataFromModel()
	{
		super.synchronizeDataFromModel();
		DisplayOrderHelper.setDefaultDisplayOrder(getBillCardPanel(), HRDeptVO.DISPLAYORDER, HRDeptVO.DEFAULT_DISPLAY_ORDER);

	}

	private UIRefPane getHeadRefPane(String itemName)
	{
		return (UIRefPane) getBillCardPanel().getHeadItem(itemName).getComponent();
	}

	private IUserManageQuery getUserManagerQry()
	{
		return NCLocator.getInstance().lookup(IUserManageQuery.class);
	}

	@Override
	public Object getValue()
	{
		AggHRDeptVO dept = (AggHRDeptVO) super.getValue();

		DeptManager[] manager = (DeptManager[]) dept.getTableVO("deptmanager");
		for (int i = 0; manager != null && i < manager.length; i++)
		{
			if (manager[i].getPk_org() != null)
			{
				continue;
			}
			manager[i].setPk_org(manager[i].getPk_dept());
			manager[i].setPk_group(PubEnv.getPk_group());
		}

		return dept;
	}
	
	/**
     * 设置部门编码字段在编辑或者新增状态下是否可编辑
     * 
     * @author heqiaoa
     */
    private void setDeptCodeEditState() {
        boolean isCodeEditable = true; //默认可编辑
        if (isAutoGenerateBillCode()) {
            // 后编码在新增态编码字段不能编辑
            if (getModel().getUiState() == UIState.EDIT) {
                isCodeEditable = getBillCodeContext().isEditable();
            } else if (getModel().getUiState() == UIState.ADD) {
                isCodeEditable = getBillCodeContext().isPrecode()
                        && getBillCodeContext().isEditable();
            }
        }
        getBillCardPanel().getHeadItem(HRDeptVO.CODE)
                .setEnabled(isCodeEditable);
    }
    
    /**
     * 获取部门编码
     * 
     * @param deptCodeItem
     */
    public void getDeptCode(){
        String billCodeStr = "";
        if(isAutoGenerateBillCode()){
            if(getBillCodeContext().isPrecode()){
                IHrBillCode hrBillCode = NCLocator.getInstance().lookup(
                        IHrBillCode.class);
                try {
                    billCodeStr = hrBillCode.getBillCode(
                            JFCommonValue.NBCR_DEPT, getModel().getContext()
                                    .getPk_group(), getSelectedNodePkOrg());
                    setAutoGeneratedCode(billCodeStr);
                } catch (BusinessException e) {
                    Logger.error(e.getMessage(), e);
                    throw new BusinessRuntimeException(e.getMessage(), e);
                }
            } else {
                billCodeStr = JFCommonValue.LEVELED_CODE_TMP;
            }
        }
        else
            getBillCardPanel().getHeadItem(HRDeptVO.CODE).setEnabled(true);
        setAutoGeneratedCode(billCodeStr);
    }
    
    private String getSelectedNodePkOrg(){
        String pk_org = getModel().getContext().getPk_org();
        Object orgdept = getTreeAppModel().getSelectedData();
        
        if (orgdept instanceof OrgVO)
        {
            pk_org = ((OrgVO) orgdept).getPk_org();
        }
        else if (orgdept instanceof HRDeptVO)
        {
            pk_org = ((HRDeptVO) orgdept).getPk_org();
        }
        return pk_org;
    }
    
    /**
     * 是否自动生成编码
     * 
     * @return boolean
     * @author heqiaoa
     */
    public boolean isAutoGenerateBillCode() {
        return getBillCodeContext() != null;
    }
    
    /**
     * 获取编码规则对象
     * 
     * @return BillCodeContext
     * @author heqiaoa
     */
    private BillCodeContext getBillCodeContext() {
        try {
            billCodeContext = NCLocator
                    .getInstance()
                    .lookup(IBillcodeManage.class)
                    .getBillCodeContext(JFCommonValue.NBCR_DEPT,
                            getModel().getContext().getPk_group(),
                            getSelectedNodePkOrg());
        } catch (BusinessException e) {
            Logger.error(e.getMessage(), e);
            throw new BusinessRuntimeException(e.getMessage(), e);
        }
        
        return billCodeContext;
    }
    
    /**
     * 部门编码回滚
     * 
     * @author heqiaoa
     */
    public void rollBackCode() {
        if (StringUtils.isNotEmpty(autoGeneratedCode)) {
            IHrBillCode hrBillCode = NCLocator.getInstance().lookup(
                    IHrBillCode.class);
            try {
                hrBillCode.rollbackPreBillCode(JFCommonValue.NBCR_DEPT,
                        getModel().getContext().getPk_group(), getSelectedNodePkOrg(), autoGeneratedCode);
            } catch (BusinessException e) {
                Logger.error(e.getMessage(), e);
                throw new BusinessRuntimeException(e.getMessage(), e);
            }
        }
    }
}
