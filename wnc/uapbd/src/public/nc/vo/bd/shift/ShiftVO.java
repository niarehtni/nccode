/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product. It is based on Velocity.     *
\***************************************************************/
package nc.vo.bd.shift;

import java.util.TimeZone;

import nc.hr.utils.MultiLangHelper;
import nc.itf.ta.algorithm.DateTimeUtils;
import nc.itf.ta.algorithm.IRelativeTime;
import nc.itf.ta.algorithm.IRelativeTimeScope;
import nc.itf.ta.algorithm.ITimeScope;
import nc.itf.ta.algorithm.RelativeTimeUtils;
import nc.itf.ta.algorithm.TimeScopeUtils;
import nc.itf.ta.algorithm.impl.DefaultRelativeTime;
import nc.itf.ta.algorithm.impl.DefaultRelativeTimeScope;
import nc.itf.ta.algorithm.impl.DefaultTimeScope;
import nc.vo.pub.SuperVO;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFDateTime;
import nc.vo.pub.lang.UFDouble;
import nc.vo.pub.lang.UFLiteralDate;

import org.apache.commons.lang.StringUtils;

/**
 * <b> 在此处简要描述此类的功能 </b>
 * <p>
 * 在此处添加此类的描述信息
 * </p>
 * 创建日期:
 * 
 * @author
 * @version NCPrj ??
 */
@SuppressWarnings("serial")
public class ShiftVO extends SuperVO {

	public static final String PK_GX = "0001Z7000000000000GX";

	private java.lang.String pk_shift;
	private java.lang.String pk_shifttype;
	private java.lang.String pk_group;
	private java.lang.String pk_org;
	private java.lang.Integer enablestate;
	private nc.vo.pub.lang.UFDouble gzsj;
	private java.lang.Integer worklen;// 上班时间到下班时间的长度（如果是上下班弹性，则是最早上班到最早下班的时间长度）
	private java.lang.String memo;
	private java.lang.Integer timebeginday;
	private String timebegintime;
	private java.lang.Integer timeendday;
	private java.lang.String timeendtime;
	private java.lang.Integer beginday;
	private java.lang.String begintime;
	private java.lang.Integer endday;
	private java.lang.String endtime;
	private nc.vo.pub.lang.UFBoolean includenightshift;
	private java.lang.Integer nightbeginday;
	private String nightbegintime;
	private java.lang.Integer nightendday;
	private java.lang.String nightendtime;
	private nc.vo.pub.lang.UFDouble nightgzsj;
	private nc.vo.pub.lang.UFDouble allowlate;
	private nc.vo.pub.lang.UFDouble largelate;
	private nc.vo.pub.lang.UFDouble allowearly;
	private nc.vo.pub.lang.UFDouble largeearly;
	private nc.vo.pub.lang.UFBoolean isautokg;// 迟到早退时长超过最大时长时，是否自动统计旷工时长
	private nc.vo.pub.lang.UFDouble kghours;
	private nc.vo.pub.lang.UFBoolean useovertmrule;
	private nc.vo.pub.lang.UFDouble overtmbeyond;
	private nc.vo.pub.lang.UFDouble overtmbegin;
	private nc.vo.pub.lang.UFBoolean useontmrule;
	private nc.vo.pub.lang.UFDouble ontmbeyond;
	private nc.vo.pub.lang.UFDouble ontmend;
	private nc.vo.pub.lang.UFBoolean defaultflag;
	private nc.vo.pub.lang.UFBoolean isallowout;
	private nc.vo.pub.lang.UFBoolean isotflexible;
	private nc.vo.pub.lang.UFBoolean isrttimeflexible;
	private nc.vo.pub.lang.UFBoolean isotflexiblefinal;
	private nc.vo.pub.lang.UFBoolean isrttimeflexiblefinal;
	private nc.vo.pub.lang.UFBoolean isflexiblefinal;
	private java.lang.String pk_sort;
	private java.lang.String creator;
	private nc.vo.pub.lang.UFDateTime creationtime;
	private java.lang.String modifier;
	private nc.vo.pub.lang.UFDateTime modifiedtime;
	private java.lang.Integer latestbeginday;
	private java.lang.String latestbegintime;
	private java.lang.Integer earliestendday;
	private java.lang.String earliestendtime;
	private java.lang.String code;
	private java.lang.String name;
	private java.lang.String name2;
	private java.lang.String name3;
	private java.lang.String name4;
	private java.lang.String name5;
	private java.lang.String name6;
	private java.lang.Integer dataoriginflag;
	private java.lang.Integer dr = 0;
	private nc.vo.pub.lang.UFDateTime ts;
	private java.lang.Integer capbeginday; // 产能开始日期
	private java.lang.String capbegintime;// 产能开始时间
	private java.lang.Integer capendday;// 产能结束日期
	private java.lang.String capendtime;// 产能结束时间
	private nc.vo.pub.lang.UFBoolean ishredited;// 考勤信息是否手动编辑过
	private nc.vo.pub.lang.UFBoolean iscapedited;// 产能信息是否手动编辑过
	private nc.vo.pub.lang.UFBoolean isturn;// 是否轮班
	private nc.vo.pub.lang.UFDouble capgzsj;// 产能工作时长
	private UFBoolean issinglecard;// 是否支持单次刷卡
	private Integer cardtype;// 单次签卡类型

	// 上班相对时间
	private IRelativeTimeScope workScope;
	// 最晚上班和最早下班相对时间
	private IRelativeTimeScope flexWorkScope;
	// 考勤相对时间
	private IRelativeTimeScope kqScope;
	// 产能相对时间
	private IRelativeTimeScope capScope;

	public static final String PK_SHIFT = "pk_shift";
	public static final String PK_SHIFTTYPE = "pk_shifttype";
	public static final String PK_GROUP = "pk_group";
	public static final String PK_ORG = "pk_org";
	public static final String ENABLESTATE = "enablestate";
	public static final String GZSJ = "gzsj";
	public static final String WORKLEN = "worklen";
	public static final String MEMO = "memo";
	public static final String TIMEBEGINDAY = "timebeginday";
	public static final String TIMEBEGINTIME = "timebegintime";
	public static final String TIMEENDDAY = "timeendday";
	public static final String TIMEENDTIME = "timeendtime";
	public static final String BEGINDAY = "beginday";
	public static final String BEGINTIME = "begintime";
	public static final String ENDDAY = "endday";
	public static final String ENDTIME = "endtime";
	public static final String INCLUDENIGHTSHIFT = "includenightshift";
	public static final String NIGHTBEGINDAY = "nightbeginday";
	public static final String NIGHTBEGINTIME = "nightbegintime";
	public static final String NIGHTENDDAY = "nightendday";
	public static final String NIGHTENDTIME = "nightendtime";
	public static final String NIGHTGZSJ = "nightgzsj";
	public static final String ALLOWLATE = "allowlate";
	public static final String LARGELATE = "largelate";
	public static final String ALLOWEARLY = "allowearly";
	public static final String LARGEEARLY = "largeearly";
	public static final String ISAUTOKG = "isautokg";
	public static final String KGHOURS = "kghours";
	public static final String USEOVERTMRULE = "useovertmrule";
	public static final String OVERTMBEYOND = "overtmbeyond";
	public static final String OVERTMBEGIN = "overtmbegin";
	public static final String USEONTMRULE = "useontmrule";
	public static final String ONTMBEYOND = "ontmbeyond";
	public static final String ONTMEND = "ontmend";
	public static final String DEFAULTFLAG = "defaultflag";
	public static final String ISALLOWOUT = "isallowout";
	public static final String ISOTFLEXIBLE = "isotflexible";
	public static final String ISRTTIMEFLEXIBLE = "isrttimeflexible";
	public static final String ISOTFLEXIBLEFINAL = "isotflexiblefinal";
	public static final String ISRTTIMEFLEXIBLEFINAL = "isrttimeflexiblefinal";
	public static final String ISFLEXIBLEFINAL = "isflexiblefinal";
	public static final String PK_SORT = "pk_sort";
	public static final String CREATOR = "creator";
	public static final String CREATIONTIME = "creationtime";
	public static final String MODIFIER = "modifier";
	public static final String MODIFIEDTIME = "modifiedtime";
	public static final String LATESTBEGINDAY = "latestbeginday";
	public static final String LATESTBEGINTIME = "latestbegintime";
	public static final String EARLIESTENDDAY = "earliestendday";
	public static final String EARLIESTENDTIME = "earliestendtime";
	public static final String CODE = "code";
	public static final String NAME = "name";
	public static final String NAME2 = "name2";
	public static final String NAME3 = "name3";
	public static final String NAME4 = "name4";
	public static final String NAME5 = "name5";
	public static final String NAME6 = "name6";
	public static final String DATAORIGINFLAG = "dataoriginflag";
	public static final String CAPBEGINDAY = "capbeginday"; // 产能开始日期
	public static final String CAPBEGINTIME = "capbegintime";// 产能开始时间
	public static final String CAPENDDAY = "capendday";// 产能结束日期
	public static final String CAPENDTIME = "capendtime";// 产能结束时间
	public static final String ISHREDITED = "ishredited";// 考勤信息是否手动编辑过
	public static final String ISCAPEDITED = "iscapedited";// 产能信息是否手动编辑过
	public static final String ISTURN = "isturn";// 是否轮班
	public static final String CAPGZSJ = "capgzsj";
	public static final String ISSINGLECARD = "issinglecard";// 是否支持单次刷卡
	public static final String CARDTYPE = "cardtype";// 单次签卡类型

	// ssx added for WNC Interface on 2017-12-20
	private String wncovertmbegin;
	public static final String WNCOVERTMBEGIN = "wncovertmbegin";

	public String getWncovertmbegin() {
		return wncovertmbegin;
	}

	public void setWncovertmbegin(String wncovertmbegin) {
		this.wncovertmbegin = wncovertmbegin;
	}

	//

	// ssx added for WNC on 2019-12-24
	private UFBoolean isUsePLMeetNL;
	private int autoNextDays;
	private UFDouble annLeaveHours;

	public static final String ISUSEPLMEETNL = "isuseplmeetnl";
	public static final String AUTONEXTDAYS = "autonextdays";
	public static final String ANNLEAVEHOURS = "annleavehours";

	public UFBoolean getIsUsePLMeetNL() {
		return isUsePLMeetNL;
	}

	public void setIsUsePLMeetNL(UFBoolean isUsePLMeetNL) {
		this.isUsePLMeetNL = isUsePLMeetNL;
	}

	public int getAutoNextDays() {
		return autoNextDays;
	}

	public void setAutoNextDays(int autoNextDays) {
		this.autoNextDays = autoNextDays;
	}

	public UFDouble getAnnLeaveHours() {
		return annLeaveHours;
	}

	public void setAnnLeaveHours(UFDouble annLeaveHours) {
		this.annLeaveHours = annLeaveHours;
	}

	//

	/**
	 * 属性pk_shift的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPk_shift() {
		return pk_shift;
	}

	/**
	 * 属性pk_shift的Setter方法. 创建日期:
	 * 
	 * @param newPk_shift
	 *            java.lang.String
	 */
	public void setPk_shift(java.lang.String newPk_shift) {
		this.pk_shift = newPk_shift;
	}

	/**
	 * 属性pk_shifttype的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPk_shifttype() {
		return pk_shifttype;
	}

	/**
	 * 属性pk_shifttype的Setter方法. 创建日期:
	 * 
	 * @param newPk_shifttype
	 *            java.lang.String
	 */
	public void setPk_shifttype(java.lang.String newPk_shifttype) {
		this.pk_shifttype = newPk_shifttype;
	}

	/**
	 * 属性pk_group的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPk_group() {
		return pk_group;
	}

	/**
	 * 属性pk_group的Setter方法. 创建日期:
	 * 
	 * @param newPk_group
	 *            java.lang.String
	 */
	public void setPk_group(java.lang.String newPk_group) {
		this.pk_group = newPk_group;
	}

	/**
	 * 属性pk_org的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPk_org() {
		return pk_org;
	}

	/**
	 * 属性pk_org的Setter方法. 创建日期:
	 * 
	 * @param newPk_org
	 *            java.lang.String
	 */
	public void setPk_org(java.lang.String newPk_org) {
		this.pk_org = newPk_org;
	}

	/**
	 * 属性enablestate的Getter方法. 创建日期:
	 * 
	 * @return java.lang.Integer
	 */
	public java.lang.Integer getEnablestate() {
		return enablestate;
	}

	/**
	 * 属性enablestate的Setter方法. 创建日期:
	 * 
	 * @param newEnablestate
	 *            java.lang.Integer
	 */
	public void setEnablestate(java.lang.Integer newEnablestate) {
		this.enablestate = newEnablestate;
	}

	/**
	 * 属性gzsj的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getGzsj() {
		return gzsj;
	}

	/**
	 * 属性gzsj的Setter方法. 创建日期:
	 * 
	 * @param newGzsj
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setGzsj(nc.vo.pub.lang.UFDouble newGzsj) {
		this.gzsj = newGzsj;
	}

	/**
	 * 属性worklen的Getter方法. 创建日期:
	 * 
	 * @return java.lang.Integer
	 */
	public java.lang.Integer getWorklen() {
		return worklen;
	}

	/**
	 * 属性worklen的Setter方法. 创建日期:
	 * 
	 * @param newWorklen
	 *            java.lang.Integer
	 */
	public void setWorklen(java.lang.Integer newWorklen) {
		this.worklen = newWorklen;
	}

	/**
	 * 属性memo的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getMemo() {
		return memo;
	}

	/**
	 * 属性memo的Setter方法. 创建日期:
	 * 
	 * @param newMemo
	 *            java.lang.String
	 */
	public void setMemo(java.lang.String newMemo) {
		this.memo = newMemo;
	}

	/**
	 * 属性timebeginday的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.Integer getTimebeginday() {
		return timebeginday;
	}

	/**
	 * 属性timebeginday的Setter方法. 创建日期:
	 * 
	 * @param newTimebeginday
	 *            java.lang.String
	 */
	public void setTimebeginday(java.lang.Integer newTimebeginday) {
		this.timebeginday = newTimebeginday;
	}

	/**
	 * 属性timebegintime的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFTime
	 */
	public String getTimebegintime() {
		return timebegintime;
	}

	/**
	 * 属性timebegintime的Setter方法. 创建日期:
	 * 
	 * @param newTimebegintime
	 *            nc.vo.pub.lang.UFTime
	 */
	public void setTimebegintime(String newTimebegintime) {
		this.timebegintime = newTimebegintime;
	}

	/**
	 * 属性timeendday的Getter方法. 创建日期:
	 * 
	 * @return java.lang.Integer
	 */
	public java.lang.Integer getTimeendday() {
		return timeendday;
	}

	/**
	 * 属性timeendday的Setter方法. 创建日期:
	 * 
	 * @param newTimeendday
	 *            java.lang.Integer
	 */
	public void setTimeendday(java.lang.Integer newTimeendday) {
		this.timeendday = newTimeendday;
	}

	/**
	 * 属性timeendtime的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getTimeendtime() {
		return timeendtime;
	}

	/**
	 * 属性timeendtime的Setter方法. 创建日期:
	 * 
	 * @param newTimeendtime
	 *            java.lang.String
	 */
	public void setTimeendtime(java.lang.String newTimeendtime) {
		this.timeendtime = newTimeendtime;
	}

	/**
	 * 属性beginday的Getter方法. 创建日期:
	 * 
	 * @return java.lang.Integer
	 */
	public java.lang.Integer getBeginday() {
		return beginday;
	}

	/**
	 * 属性beginday的Setter方法. 创建日期:
	 * 
	 * @param newBeginday
	 *            java.lang.Integer
	 */
	public void setBeginday(java.lang.Integer newBeginday) {
		this.beginday = newBeginday;
	}

	/**
	 * 属性begintime的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getBegintime() {
		return begintime;
	}

	/**
	 * 属性begintime的Setter方法. 创建日期:
	 * 
	 * @param newBegintime
	 *            java.lang.String
	 */
	public void setBegintime(java.lang.String newBegintime) {
		this.begintime = newBegintime;
	}

	/**
	 * 属性endday的Getter方法. 创建日期:
	 * 
	 * @return java.lang.Integer
	 */
	public java.lang.Integer getEndday() {
		return endday;
	}

	/**
	 * 属性endday的Setter方法. 创建日期:
	 * 
	 * @param newEndday
	 *            java.lang.Integer
	 */
	public void setEndday(java.lang.Integer newEndday) {
		this.endday = newEndday;
	}

	/**
	 * 属性endtime的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getEndtime() {
		return endtime;
	}

	/**
	 * 属性endtime的Setter方法. 创建日期:
	 * 
	 * @param newEndtime
	 *            java.lang.String
	 */
	public void setEndtime(java.lang.String newEndtime) {
		this.endtime = newEndtime;
	}

	/**
	 * 属性includenightshift的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIncludenightshift() {
		return includenightshift;
	}

	/**
	 * 属性includenightshift的Setter方法. 创建日期:
	 * 
	 * @param newIncludenightshift
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIncludenightshift(nc.vo.pub.lang.UFBoolean newIncludenightshift) {
		this.includenightshift = newIncludenightshift;
	}

	/**
	 * 属性nightbeginday的Getter方法. 创建日期:
	 * 
	 * @return java.lang.Integer
	 */
	public java.lang.Integer getNightbeginday() {
		return nightbeginday;
	}

	/**
	 * 属性nightbeginday的Setter方法. 创建日期:
	 * 
	 * @param newNightbeginday
	 *            java.lang.Integer
	 */
	public void setNightbeginday(java.lang.Integer newNightbeginday) {
		this.nightbeginday = newNightbeginday;
	}

	/**
	 * 属性nightbegintime的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFTime
	 */
	public String getNightbegintime() {
		return nightbegintime;
	}

	/**
	 * 属性nightbegintime的Setter方法. 创建日期:
	 * 
	 * @param newNightbegintime
	 *            nc.vo.pub.lang.UFTime
	 */
	public void setNightbegintime(String newNightbegintime) {
		this.nightbegintime = newNightbegintime;
	}

	/**
	 * 属性nightendday的Getter方法. 创建日期:
	 * 
	 * @return java.lang.Integer
	 */
	public java.lang.Integer getNightendday() {
		return nightendday;
	}

	/**
	 * 属性nightendday的Setter方法. 创建日期:
	 * 
	 * @param newNightendday
	 *            java.lang.Integer
	 */
	public void setNightendday(java.lang.Integer newNightendday) {
		this.nightendday = newNightendday;
	}

	/**
	 * 属性nightendtime的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getNightendtime() {
		return nightendtime;
	}

	/**
	 * 属性nightendtime的Setter方法. 创建日期:
	 * 
	 * @param newNightendtime
	 *            java.lang.String
	 */
	public void setNightendtime(java.lang.String newNightendtime) {
		this.nightendtime = newNightendtime;
	}

	/**
	 * 属性nightgzsj的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getNightgzsj() {
		return nightgzsj;
	}

	/**
	 * 属性nightgzsj的Setter方法. 创建日期:
	 * 
	 * @param newNightgzsj
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setNightgzsj(nc.vo.pub.lang.UFDouble newNightgzsj) {
		this.nightgzsj = newNightgzsj;
	}

	/**
	 * 属性allowlate的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getAllowlate() {
		return allowlate;
	}

	public double getAllowlateseconds() {
		return allowlate == null ? 0 : allowlate.doubleValue() * 60;
	}

	/**
	 * 属性allowlate的Setter方法. 创建日期:
	 * 
	 * @param newAllowlate
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setAllowlate(nc.vo.pub.lang.UFDouble newAllowlate) {
		this.allowlate = newAllowlate;
	}

	/**
	 * 属性largelate的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getLargelate() {
		return largelate;
	}

	public double getLargelateseconds() {
		return largelate == null ? 0 : largelate.doubleValue() * 60;
	}

	/**
	 * 属性largelate的Setter方法. 创建日期:
	 * 
	 * @param newLargelate
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setLargelate(nc.vo.pub.lang.UFDouble newLargelate) {
		this.largelate = newLargelate;
	}

	/**
	 * 属性allowearly的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getAllowearly() {
		return allowearly;
	}

	public double getAllowearlyseconds() {
		return allowearly == null ? 0 : allowearly.doubleValue() * 60;
	}

	/**
	 * 属性allowearly的Setter方法. 创建日期:
	 * 
	 * @param newAllowearly
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setAllowearly(nc.vo.pub.lang.UFDouble newAllowearly) {
		this.allowearly = newAllowearly;
	}

	/**
	 * 属性largeearly的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getLargeearly() {
		return largeearly;
	}

	public double getLargeearlyseconds() {
		return largeearly == null ? 0 : largeearly.doubleValue() * 60;
	}

	/**
	 * 属性largeearly的Setter方法. 创建日期:
	 * 
	 * @param newLargeearly
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setLargeearly(nc.vo.pub.lang.UFDouble newLargeearly) {
		this.largeearly = newLargeearly;
	}

	/**
	 * 属性isautokg的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsautokg() {
		return isautokg;
	}

	/**
	 * 属性isautokg的Setter方法. 创建日期:
	 * 
	 * @param newIsautokg
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIsautokg(nc.vo.pub.lang.UFBoolean newIsautokg) {
		this.isautokg = newIsautokg;
	}

	/**
	 * 属性kghours的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getKghours() {
		return kghours;
	}

	/**
	 * 属性kghours的Setter方法. 创建日期:
	 * 
	 * @param newKghours
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setKghours(nc.vo.pub.lang.UFDouble newKghours) {
		this.kghours = newKghours;
	}

	/**
	 * 属性useovertmrule的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getUseovertmrule() {
		return useovertmrule;
	}

	/**
	 * 属性useovertmrule的Setter方法. 创建日期:
	 * 
	 * @param newUseovertmrule
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setUseovertmrule(nc.vo.pub.lang.UFBoolean newUseovertmrule) {
		this.useovertmrule = newUseovertmrule;
	}

	/**
	 * 属性overtmbeyond的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getOvertmbeyond() {
		return overtmbeyond;
	}

	/**
	 * 属性overtmbeyond的Setter方法. 创建日期:
	 * 
	 * @param newOvertmbeyond
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setOvertmbeyond(nc.vo.pub.lang.UFDouble newOvertmbeyond) {
		this.overtmbeyond = newOvertmbeyond;
	}

	/**
	 * 属性overtmbegin的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getOvertmbegin() {
		return overtmbegin;
	}

	/**
	 * 属性overtmbegin的Setter方法. 创建日期:
	 * 
	 * @param newOvertmbegin
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setOvertmbegin(nc.vo.pub.lang.UFDouble newOvertmbegin) {
		this.overtmbegin = newOvertmbegin;
	}

	/**
	 * 属性useontmrule的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getUseontmrule() {
		return useontmrule;
	}

	/**
	 * 属性useontmrule的Setter方法. 创建日期:
	 * 
	 * @param newUseontmrule
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setUseontmrule(nc.vo.pub.lang.UFBoolean newUseontmrule) {
		this.useontmrule = newUseontmrule;
	}

	/**
	 * 属性ontmbeyond的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getOntmbeyond() {
		return ontmbeyond;
	}

	/**
	 * 属性ontmbeyond的Setter方法. 创建日期:
	 * 
	 * @param newOntmbeyond
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setOntmbeyond(nc.vo.pub.lang.UFDouble newOntmbeyond) {
		this.ontmbeyond = newOntmbeyond;
	}

	/**
	 * 属性ontmend的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDouble
	 */
	public nc.vo.pub.lang.UFDouble getOntmend() {
		return ontmend;
	}

	/**
	 * 属性ontmend的Setter方法. 创建日期:
	 * 
	 * @param newOntmend
	 *            nc.vo.pub.lang.UFDouble
	 */
	public void setOntmend(nc.vo.pub.lang.UFDouble newOntmend) {
		this.ontmend = newOntmend;
	}

	/**
	 * 属性defaultflag的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getDefaultflag() {
		return defaultflag;
	}

	/**
	 * 属性defaultflag的Setter方法. 创建日期:
	 * 
	 * @param newDefaultflag
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setDefaultflag(nc.vo.pub.lang.UFBoolean newDefaultflag) {
		this.defaultflag = newDefaultflag;
	}

	/**
	 * 属性isallowout的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsallowout() {
		return isallowout;
	}

	/**
	 * 属性isallowout的Setter方法. 创建日期:
	 * 
	 * @param newIsallowout
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIsallowout(nc.vo.pub.lang.UFBoolean newIsallowout) {
		this.isallowout = newIsallowout;
	}

	/**
	 * 属性isotflexible的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsotflexible() {
		return isotflexible;
	}

	/**
	 * 属性isotflexible的Setter方法. 创建日期:
	 * 
	 * @param newIsotflexible
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIsotflexible(nc.vo.pub.lang.UFBoolean newIsotflexible) {
		this.isotflexible = newIsotflexible;
	}

	/**
	 * 属性isrttimeflexible的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsrttimeflexible() {
		return isrttimeflexible;
	}

	/**
	 * 属性isrttimeflexible的Setter方法. 创建日期:
	 * 
	 * @param newIsrttimeflexible
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIsrttimeflexible(nc.vo.pub.lang.UFBoolean newIsrttimeflexible) {
		this.isrttimeflexible = newIsrttimeflexible;
	}

	/**
	 * 属性isotflexiblefinal的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsotflexiblefinal() {
		return isotflexiblefinal;
	}

	/**
	 * 属性isotflexiblefinal的Setter方法. 创建日期:
	 * 
	 * @param newIsotflexiblefinal
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIsotflexiblefinal(nc.vo.pub.lang.UFBoolean newIsotflexiblefinal) {
		this.isotflexiblefinal = newIsotflexiblefinal;
	}

	/**
	 * 属性isrttimeflexiblefinal的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsrttimeflexiblefinal() {
		return isrttimeflexiblefinal;
	}

	/**
	 * 属性isrttimeflexiblefinal的Setter方法. 创建日期:
	 * 
	 * @param newIsrttimeflexiblefinal
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIsrttimeflexiblefinal(nc.vo.pub.lang.UFBoolean newIsrttimeflexiblefinal) {
		this.isrttimeflexiblefinal = newIsrttimeflexiblefinal;
	}

	/**
	 * 属性isflexiblefinal的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsflexiblefinal() {
		return isflexiblefinal;
	}

	/**
	 * 属性isflexiblefinal的Setter方法. 创建日期:
	 * 
	 * @param newIsflexiblefinal
	 *            nc.vo.pub.lang.UFBoolean
	 */
	public void setIsflexiblefinal(nc.vo.pub.lang.UFBoolean newIsflexiblefinal) {
		this.isflexiblefinal = newIsflexiblefinal;
	}

	/**
	 * 属性pk_sort的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPk_sort() {
		return pk_sort;
	}

	/**
	 * 属性pk_sort的Setter方法. 创建日期:
	 * 
	 * @param newPk_sort
	 *            java.lang.String
	 */
	public void setPk_sort(java.lang.String newPk_sort) {
		this.pk_sort = newPk_sort;
	}

	/**
	 * 属性creator的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCreator() {
		return creator;
	}

	/**
	 * 属性creator的Setter方法. 创建日期:
	 * 
	 * @param newCreator
	 *            java.lang.String
	 */
	public void setCreator(java.lang.String newCreator) {
		this.creator = newCreator;
	}

	/**
	 * 属性creationtime的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDateTime
	 */
	public nc.vo.pub.lang.UFDateTime getCreationtime() {
		return creationtime;
	}

	/**
	 * 属性creationtime的Setter方法. 创建日期:
	 * 
	 * @param newCreationtime
	 *            nc.vo.pub.lang.UFDateTime
	 */
	public void setCreationtime(nc.vo.pub.lang.UFDateTime newCreationtime) {
		this.creationtime = newCreationtime;
	}

	/**
	 * 属性modifier的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getModifier() {
		return modifier;
	}

	/**
	 * 属性modifier的Setter方法. 创建日期:
	 * 
	 * @param newModifier
	 *            java.lang.String
	 */
	public void setModifier(java.lang.String newModifier) {
		this.modifier = newModifier;
	}

	/**
	 * 属性modifiedtime的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDateTime
	 */
	public nc.vo.pub.lang.UFDateTime getModifiedtime() {
		return modifiedtime;
	}

	/**
	 * 属性modifiedtime的Setter方法. 创建日期:
	 * 
	 * @param newModifiedtime
	 *            nc.vo.pub.lang.UFDateTime
	 */
	public void setModifiedtime(nc.vo.pub.lang.UFDateTime newModifiedtime) {
		this.modifiedtime = newModifiedtime;
	}

	/**
	 * 属性latestbeginday的Getter方法. 创建日期:
	 * 
	 * @return java.lang.Integer
	 */
	public java.lang.Integer getLatestbeginday() {
		return latestbeginday;
	}

	/**
	 * 属性latestbeginday的Setter方法. 创建日期:
	 * 
	 * @param newLatestbeginday
	 *            java.lang.Integer
	 */
	public void setLatestbeginday(java.lang.Integer newLatestbeginday) {
		this.latestbeginday = newLatestbeginday;
	}

	/**
	 * 属性latestbegintime的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getLatestbegintime() {
		return latestbegintime;
	}

	/**
	 * 属性latestbegintime的Setter方法. 创建日期:
	 * 
	 * @param newLatestbegintime
	 *            java.lang.String
	 */
	public void setLatestbegintime(java.lang.String newLatestbegintime) {
		this.latestbegintime = newLatestbegintime;
	}

	/**
	 * 属性earliestendday的Getter方法. 创建日期:
	 * 
	 * @return java.lang.Integer
	 */
	public java.lang.Integer getEarliestendday() {
		return earliestendday;
	}

	/**
	 * 属性earliestendday的Setter方法. 创建日期:
	 * 
	 * @param newEarliestendday
	 *            java.lang.Integer
	 */
	public void setEarliestendday(java.lang.Integer newEarliestendday) {
		this.earliestendday = newEarliestendday;
	}

	/**
	 * 属性earliestendtime的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getEarliestendtime() {
		return earliestendtime;
	}

	/**
	 * 属性earliestendtime的Setter方法. 创建日期:
	 * 
	 * @param newEarliestendtime
	 *            java.lang.String
	 */
	public void setEarliestendtime(java.lang.String newEarliestendtime) {
		this.earliestendtime = newEarliestendtime;
	}

	/**
	 * 属性code的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getCode() {
		return code;
	}

	/**
	 * 属性code的Setter方法. 创建日期:
	 * 
	 * @param newCode
	 *            java.lang.String
	 */
	public void setCode(java.lang.String newCode) {
		this.code = newCode;
	}

	/**
	 * 属性name的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getName() {
		return name;
	}

	/**
	 * 属性name的Setter方法. 创建日期:
	 * 
	 * @param newName
	 *            java.lang.String
	 */
	public void setName(java.lang.String newName) {
		this.name = newName;
	}

	/**
	 * 属性name2的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getName2() {
		return name2;
	}

	/**
	 * 属性name2的Setter方法. 创建日期:
	 * 
	 * @param newName2
	 *            java.lang.String
	 */
	public void setName2(java.lang.String newName2) {
		this.name2 = newName2;
	}

	/**
	 * 属性name3的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getName3() {
		return name3;
	}

	/**
	 * 属性name3的Setter方法. 创建日期:
	 * 
	 * @param newName3
	 *            java.lang.String
	 */
	public void setName3(java.lang.String newName3) {
		this.name3 = newName3;
	}

	/**
	 * 属性name4的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getName4() {
		return name4;
	}

	/**
	 * 属性name4的Setter方法. 创建日期:
	 * 
	 * @param newName4
	 *            java.lang.String
	 */
	public void setName4(java.lang.String newName4) {
		this.name4 = newName4;
	}

	/**
	 * 属性name5的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getName5() {
		return name5;
	}

	/**
	 * 属性name5的Setter方法. 创建日期:
	 * 
	 * @param newName5
	 *            java.lang.String
	 */
	public void setName5(java.lang.String newName5) {
		this.name5 = newName5;
	}

	/**
	 * 属性name6的Getter方法. 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getName6() {
		return name6;
	}

	/**
	 * 属性name6的Setter方法. 创建日期:
	 * 
	 * @param newName6
	 *            java.lang.String
	 */
	public void setName6(java.lang.String newName6) {
		this.name6 = newName6;
	}

	/**
	 * 属性dataoriginflag的Getter方法. 创建日期:
	 * 
	 * @return java.lang.Integer
	 */
	public java.lang.Integer getDataoriginflag() {
		return dataoriginflag;
	}

	/**
	 * 属性dataoriginflag的Setter方法. 创建日期:
	 * 
	 * @param newDataoriginflag
	 *            java.lang.Integer
	 */
	public void setDataoriginflag(java.lang.Integer newDataoriginflag) {
		this.dataoriginflag = newDataoriginflag;
	}

	/**
	 * 属性dr的Getter方法. 创建日期:
	 * 
	 * @return java.lang.Integer
	 */
	public java.lang.Integer getDr() {
		return dr;
	}

	/**
	 * 属性dr的Setter方法. 创建日期:
	 * 
	 * @param newDr
	 *            java.lang.Integer
	 */
	public void setDr(java.lang.Integer newDr) {
		this.dr = newDr;
	}

	/**
	 * 属性ts的Getter方法. 创建日期:
	 * 
	 * @return nc.vo.pub.lang.UFDateTime
	 */
	public nc.vo.pub.lang.UFDateTime getTs() {
		return ts;
	}

	/**
	 * 属性ts的Setter方法. 创建日期:
	 * 
	 * @param newTs
	 *            nc.vo.pub.lang.UFDateTime
	 */
	public void setTs(nc.vo.pub.lang.UFDateTime newTs) {
		this.ts = newTs;
	}

	/**
	 * <p>
	 * 取得父VO主键字段.
	 * <p>
	 * 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getParentPKFieldName() {
		return null;
	}

	/**
	 * <p>
	 * 取得表主键.
	 * <p>
	 * 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getPKFieldName() {
		return "pk_shift";
	}

	/**
	 * <p>
	 * 返回表名称.
	 * <p>
	 * 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public java.lang.String getTableName() {
		return "bd_shift";
	}

	/**
	 * <p>
	 * 返回表名称.
	 * <p>
	 * 创建日期:
	 * 
	 * @return java.lang.String
	 */
	public static java.lang.String getDefaultTableName() {
		return "bd_shift";
	}

	/**
	 * 按照默认方式创建构造子.
	 * 
	 * 创建日期:
	 */
	public ShiftVO() {
		super();
	}

	public boolean isFlexibleFinal() {
		return isflexiblefinal != null && isflexiblefinal.booleanValue();
	}

	public boolean isOtFlexibleFinal() {
		return isotflexiblefinal != null && isotflexiblefinal.booleanValue();
	}

	public boolean isRttimeFlexibleFinal() {
		return isrttimeflexiblefinal != null && isrttimeflexiblefinal.booleanValue();
	}

	public java.lang.Integer getCapbeginday() {
		return capbeginday;
	}

	public void setCapbeginday(java.lang.Integer capbeginday) {
		this.capbeginday = capbeginday;
	}

	public java.lang.String getCapbegintime() {
		return capbegintime;
	}

	public void setCapbegintime(java.lang.String capbegintime) {
		this.capbegintime = capbegintime;
	}

	public java.lang.Integer getCapendday() {
		return capendday;
	}

	public void setCapendday(java.lang.Integer capendday) {
		this.capendday = capendday;
	}

	public java.lang.String getCapendtime() {
		return capendtime;
	}

	public void setCapendtime(java.lang.String capendtime) {
		this.capendtime = capendtime;
	}

	public nc.vo.pub.lang.UFBoolean getIshredited() {
		return ishredited;
	}

	public void setIshredited(nc.vo.pub.lang.UFBoolean ishredited) {
		this.ishredited = ishredited;
	}

	public nc.vo.pub.lang.UFBoolean getIscapedited() {
		return iscapedited;
	}

	public void setIscapedited(nc.vo.pub.lang.UFBoolean iscapedited) {
		this.iscapedited = iscapedited;
	}

	public nc.vo.pub.lang.UFBoolean getIsturn() {
		return isturn;
	}

	public void setIsturn(nc.vo.pub.lang.UFBoolean isturn) {
		this.isturn = isturn;
	}

	public nc.vo.pub.lang.UFDouble getCapgzsj() {
		return capgzsj;
	}

	public void setCapgzsj(nc.vo.pub.lang.UFDouble capgzsj) {
		this.capgzsj = capgzsj;
	}

	/**
	 * 转换为上班时间到下班时间的相对时间段。如果是弹性班，就是最早上班到最晚下班的时间段
	 * 
	 * @param vo
	 *            班次定义
	 * @return
	 */
	public IRelativeTimeScope toRelativeWorkScope() {
		// 上班相对时间
		if (workScope == null) {
			workScope = new DefaultRelativeTimeScope();
		}
		// 上班日期
		workScope.setScopeStartDate(this.getBeginday());
		// 上班时间
		workScope.setScopeStartTime(this.getBegintime());
		// 下班日期
		workScope.setScopeEndDate(this.getEndday());
		// 下班时间
		workScope.setScopeEndTime(this.getEndtime());
		// 不包含最后一秒
		workScope.setContainsLastSecond(false);
		return workScope;
	}

	/**
	 * 转换为产能开始时间到结束时间的相对时间段
	 * 
	 * @param vo
	 *            班次定义
	 * @return
	 */
	public IRelativeTimeScope toRelativeCapScope() {
		// 上班相对时间
		if (capScope == null) {
			capScope = new DefaultRelativeTimeScope();
		}
		// 上班日期
		capScope.setScopeStartDate(this.getCapbeginday());
		// 上班时间
		capScope.setScopeStartTime(this.getCapbegintime());
		// 下班日期
		capScope.setScopeEndDate(this.getCapendday());
		// 下班时间
		capScope.setScopeEndTime(this.getCapendtime());
		// 不包含最后一秒
		capScope.setContainsLastSecond(false);
		return capScope;
	}

	public ITimeScope toWorkScope(String date, TimeZone timeZone) {
		return TimeScopeUtils.toTimeScope(toRelativeWorkScope(), date, timeZone);
	}

	public ITimeScope toCapScope(String date, TimeZone timeZone) {
		return TimeScopeUtils.toTimeScope(toRelativeCapScope(), date, timeZone);
	}

	/**
	 * 转换为最晚上班、最早下班相对时间
	 * 
	 * @param vo
	 *            班次定义
	 * @return
	 */
	public IRelativeTimeScope toRelativeFlexWorkScope() {
		// 上班相对时间
		if (flexWorkScope == null) {
			flexWorkScope = new DefaultRelativeTimeScope();
		}
		// 最晚上班日期
		flexWorkScope.setScopeStartDate(this.getLatestbeginday());
		// 最晚上班时间
		flexWorkScope.setScopeStartTime(this.getLatestbegintime());
		// 最早下班日期
		flexWorkScope.setScopeEndDate(this.getEarliestendday());
		// 最早下班时间
		flexWorkScope.setScopeEndTime(this.getEarliestendtime());
		// 不包含最后一秒
		flexWorkScope.setContainsLastSecond(false);
		return flexWorkScope;
	}

	/**
	 * 转换为最早刷卡时间到最晚刷卡时间段的相对时间段
	 * 
	 * @param vo
	 *            班次定义
	 * @return
	 */
	public IRelativeTimeScope toRelativeKqScope() {
		// 考勤相对时间
		if (kqScope == null) {
			kqScope = new DefaultRelativeTimeScope();
		}
		// 考勤开始日期
		kqScope.setScopeStartDate(this.getTimebeginday());
		// 考勤开始时刻
		kqScope.setScopeStartTime(this.getTimebegintime());
		// 考勤结束日期
		kqScope.setScopeEndDate(this.getTimeendday());
		// 考勤结束时刻
		kqScope.setScopeEndTime(this.getTimeendtime());
		// 不包含最后一秒
		kqScope.setContainsLastSecond(false);
		return kqScope;
	}

	/**
	 * 转换为最早刷卡时间到最晚刷卡时间段的绝对时间段
	 * 
	 * @param date
	 * @param timeZone
	 * @return
	 */
	public ITimeScope toKqScope(String date, TimeZone timeZone) {
		return TimeScopeUtils.toTimeScope(toRelativeKqScope(), date, timeZone);
	}

	/**
	 * 获取一个班次的考勤时间段 如果当日是非公休的班，则直接返回刷卡开始时间到刷卡结束时间 如果是公休，则要看前一天和后一天的班
	 * 如果前一天是公休，则开始时间是当日0点，否则是前一天班次的刷卡结束时间
	 * 如果后一天是公休，则结束时间是当日23:59:59秒，否则是后一天班次的刷卡开始时间
	 * 
	 * @param curVO
	 * @param preVO
	 * @param nextVO
	 * @param curdate
	 * @param curTimeZone
	 *            ,当天的时区
	 * @param preTimeZone
	 *            ,前一天的时区
	 * @param nextTimeZone
	 *            ,下一天的时区
	 * @return
	 */
	public static ITimeScope toKqScope(ShiftVO curVO, ShiftVO preVO, ShiftVO nextVO, String curdate,
			TimeZone curTimeZone, TimeZone preTimeZone, TimeZone nextTimeZone) {
		if (curVO != null && !ShiftVO.PK_GX.equals(curVO.getPk_shift()))
			return curVO.toKqScope(curdate, curTimeZone);
		UFLiteralDate curDate = UFLiteralDate.getDate(curdate);
		UFDateTime beginTime = null;
		if (preVO == null || ShiftVO.PK_GX.equals(preVO.getPk_shift())) {
			beginTime = new UFDateTime(curdate + " 00:00:00", curTimeZone);
		} else {
			UFLiteralDate preDate = curDate.getDateBefore(1);
			beginTime = RelativeTimeUtils.toDateTime(preVO.getTimeendday(), preVO.getTimeendtime(), preDate.toString(),
					preTimeZone);
		}
		boolean containsLastSecond = false;
		UFDateTime endTime = null;
		if (nextVO == null || ShiftVO.PK_GX.equals(nextVO.getPk_shift())) {
			endTime = new UFDateTime(curdate + " 23:59:59", curTimeZone);
			containsLastSecond = true;
		} else {
			UFLiteralDate nextDate = curDate.getDateAfter(1);
			endTime = RelativeTimeUtils.toDateTime(nextVO.getTimebeginday(), nextVO.getTimebegintime(),
					nextDate.toString(), nextTimeZone);
		}
		return new DefaultTimeScope(beginTime, endTime, containsLastSecond);
	}

	/**
	 * 获取前后紧邻的两个班次的交界时间点，专为加班校验 若后面是工作日，则以后一个工作日的刷卡开始为界 若后面是公休，则
	 * 若前面也是公休，则以前一个公休的24点为界
	 * 若前面是工作日，则看前一个工作日的刷卡结束是否跨了24点，若跨了，则以前一个工作日的刷卡结束为界；否则以前一个工作日的24点为界
	 * 若前工作日后公休，则
	 * 
	 * @param preVO
	 * @param nextVO
	 * @param preDate
	 * @param nextDate
	 * @param preTimeZone
	 * @param nextTimeZone
	 * @return
	 */
	public static UFDateTime getBoundTimeBetweenTwoShift4OvertimeCheck(ShiftVO preVO, ShiftVO nextVO,
			UFLiteralDate preDate, UFLiteralDate nextDate, TimeZone preTimeZone, TimeZone nextTimeZone) {
		boolean isNextGx = nextVO == null || ShiftVO.PK_GX.equals(nextVO.getPk_shift());
		if (!isNextGx) {
			return RelativeTimeUtils.toDateTime(nextVO.getTimebeginday(), nextVO.getTimebegintime(),
					nextDate.toString(), nextTimeZone);
		}
		boolean isPreGx = preVO == null || ShiftVO.PK_GX.equals(preVO.getPk_shift());
		if (isPreGx) {
			return DateTimeUtils.toZeroOClock(nextDate, preTimeZone);
		}
		UFDateTime preEndTime = RelativeTimeUtils.toDateTime(preVO.getTimeendday(), preVO.getTimeendtime(),
				preDate.toString(), preTimeZone);
		UFLiteralDate preEndDate = preEndTime.getDate().toUFLiteralDate(preTimeZone);
		if (preEndDate.after(preDate))
			return preEndTime;
		return DateTimeUtils.toZeroOClock(nextDate, preTimeZone);
	}

	/**
	 * 获取一个班次的考勤时间段,专门用于加班校验和加班单据生成，不用于其他任何场景
	 * 如果当日是非公休的班，则考勤时间段的开始时间为刷卡开始时间，结束时间要看下一日的班次：若下一日班次也是非公休班，则结束时间是下一班次的刷卡
	 * 开始时间；若下一日是公休，则结束时间=later(当日24点，当日班次的刷卡结束时间) 如果是公休，则要看前一天和后一天的班
	 * 如果前一天是公休，则开始时间是当日0点，否则=later(当日0点，前一班次的刷卡结束时间)
	 * 如果后一天是公休，则结束时间是当日23:59:59秒，否则是后一天班次的刷卡开始时间
	 * 
	 * @param curVO
	 * @param preVO
	 * @param nextVO
	 * @param curdate
	 * @param curTimeZone
	 *            ,当天的时区
	 * @param preTimeZone
	 *            ,前一天的时区
	 * @param nextTimeZone
	 *            ,下一天的时区
	 * @return
	 */
	public static ITimeScope toKqScope4OvertimeCheckAndGen(ShiftVO curVO, ShiftVO preVO, ShiftVO nextVO,
			String curdate, TimeZone curTimeZone, TimeZone preTimeZone, TimeZone nextTimeZone) {
		UFLiteralDate curDate = UFLiteralDate.getDate(curdate);
		UFDateTime beginTime = getBoundTimeBetweenTwoShift4OvertimeCheck(preVO, curVO, curDate.getDateBefore(1),
				curDate, preTimeZone, curTimeZone);
		UFDateTime endTime = getBoundTimeBetweenTwoShift4OvertimeCheck(curVO, nextVO, curDate, curDate.getDateAfter(1),
				curTimeZone, nextTimeZone);
		return new DefaultTimeScope(beginTime, endTime);
	}

	@Override
	public int hashCode() {
		return super.hashCode();
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null || !(obj instanceof ShiftVO))
			return false;
		if (StringUtils.isEmpty(pk_shift) || StringUtils.isEmpty(((ShiftVO) obj).getPk_shift()))
			return false;
		return pk_shift.equals(((ShiftVO) obj).getPk_shift());
	}

	public String getMultiLangName() {
		return MultiLangHelper.getName(this);
	}

	/**
	 * 得到最早上班与最晚上班时间的中间时间点
	 * 
	 * @param date
	 * @param timeZone
	 * @return
	 */
	public UFDateTime getMidOnDutyTime(String date, TimeZone timeZone) {
		if (!isOtFlexibleFinal())
			return RelativeTimeUtils.toDateTime(getBeginday(), getBegintime(), date, timeZone);
		IRelativeTime earliestOnDutyTime = new DefaultRelativeTime(getBeginday(), getBegintime());
		IRelativeTime latestOnDutyTime = new DefaultRelativeTime(getLatestbeginday(), getLatestbegintime());
		return RelativeTimeUtils.toDateTime(RelativeTimeUtils.getMidTime(earliestOnDutyTime, latestOnDutyTime), date,
				timeZone);
	}

	/**
	 * 得到本班次的上下班的弹性段，算法是取得最早上班到最晚上班，最早下班到最晚下班两个时间，再merge
	 * 
	 * @param date
	 * @param timeZone
	 * @return
	 */
	public ITimeScope[] getFlexibleScopes(String date, TimeZone timeZone) {
		if (!isOtFlexibleFinal()) {
			return null;
		}
		ITimeScope scope1 = new DefaultTimeScope(RelativeTimeUtils.toDateTime(getBeginday(), getBegintime(), date,
				timeZone), RelativeTimeUtils.toDateTime(getLatestbeginday(), getLatestbegintime(), date, timeZone));
		ITimeScope scope2 = new DefaultTimeScope(RelativeTimeUtils.toDateTime(getEarliestendday(),
				getEarliestendtime(), date, timeZone), RelativeTimeUtils.toDateTime(getEndday(), getEndtime(), date,
				timeZone));
		return TimeScopeUtils.mergeTimeScopes(new ITimeScope[] { scope1, scope2 });
	}

	/**
	 * 根据规定下/上班时间，计算超过/早于就算加班的时间点，以及开始计做加班的时间点
	 * 
	 * @param offOnDutyTime
	 *            。规定的下/上班时间。一般情况下就是班次定义的下/上班时间，但有两种情况下不是：
	 *            一个是弹性班，此时应该用固化后的下/上班时间 一个是被假日切割的情况，此时应该用切割后的时间作为下/上班时间
	 * @param isAfterOffDuty
	 * @return 一个时间段。对于延时加班，start是开始计做加班的时间点，end是超过就算加班的时间点；对于提前加班，刚好相反
	 *         如果班次上没有勾选这个参数，则返回null
	 */
	public ITimeScope getOvertimeRuleScope(UFDateTime offOnDutyTime, boolean isAfterOffDuty) {
		UFBoolean isNeedProcess = isAfterOffDuty ? getUseovertmrule() : getUseontmrule();
		if (isNeedProcess == null || !isNeedProcess.booleanValue())
			return null;
		UFDouble beyond = isAfterOffDuty ? getOvertmbeyond() : getOntmbeyond();// 超过/早于即计为加班的分钟数
		UFDouble beginEnd = isAfterOffDuty ? getOvertmbegin() : getOntmend();// 开始计做加班的分钟数
		int beyondSeconds = beyond == null ? 0 : beyond.intValue() * 60;
		int beginEndSeconds = beginEnd == null ? 0 : beginEnd.intValue() * 60;
		UFDateTime beyondTime = isAfterOffDuty ? DateTimeUtils.getDateTimeAfterMills(offOnDutyTime,
				beyondSeconds * 1000) : DateTimeUtils.getDateTimeBeforeMills(offOnDutyTime, beyondSeconds * 1000);
		UFDateTime beginEndTime = isAfterOffDuty ? DateTimeUtils.getDateTimeAfterMills(offOnDutyTime,
				beginEndSeconds * 1000) : DateTimeUtils.getDateTimeBeforeMills(offOnDutyTime, beginEndSeconds * 1000);
		return isAfterOffDuty ? new DefaultTimeScope(beginEndTime, beyondTime) : new DefaultTimeScope(beyondTime,
				beginEndTime);
	}

	/**
	 * 是否支持单次刷卡
	 * 
	 * @return
	 */
	public UFBoolean getIssinglecard() {
		return issinglecard;
	}

	public void setIssinglecard(UFBoolean issinglecard) {
		this.issinglecard = issinglecard;
	}

	public boolean isSingleCard() {
		return issinglecard != null && issinglecard.booleanValue();
	}

	/**
	 * 单次签卡类型
	 * 
	 * @return
	 */
	public Integer getCardtype() {
		return cardtype;
	}

	public void setCardtype(Integer cardtype) {
		this.cardtype = cardtype;
	}
}
