/***************************************************************\
 *     The skeleton of this class is generated by an automatic *
 * code generator for NC product. It is based on Velocity.     *
\***************************************************************/
package nc.vo.bd.holiday;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.util.CollectionUtils;

import nc.hr.utils.MultiLangHelper;
import nc.hr.utils.ResHelper;
import nc.itf.ta.algorithm.ITimeScope;
import nc.itf.ta.algorithm.TimeScopeUtils;
import nc.itf.ta.algorithm.impl.DefaultTimeScope;
import nc.vo.pub.BusinessException;
import nc.vo.pub.SuperVO;
import nc.vo.pub.lang.UFDateTime;
import nc.vo.pub.lang.UFLiteralDate;

/**
 * <b> 在此处简要描述此类的功能 </b>
 * <p>
 *     在此处添加此类的描述信息
 * </p>
 * 创建日期:
 * @author
 * @version NCPrj ??
 */
@SuppressWarnings("serial")
public class HolidayVO extends SuperVO {

	//日期类型-工作日，非工作日，假日，非全员假日
	public static final int DAY_TYPE_WORKDAY=0;
	public static final int DAY_TYPE_NONWORKDAY=1;
	public static final int DAY_TYPE_HOLIDAY=2;
	public static final int DAY_TYPE_HOLIDAY_NOTALL=3;
	//Ares.Tank 新增了例假日日期类型和日历天类型对应 2018-9-3 15:01:38
	public static final int DAY_TYPE_OFFICAL_HOLIDAY=4;

	//中国大陆假日pk_defdoc的pk常量
	public static final String HOLIDAYSORT_CHINAMAINLAND="1001Z71000000001AUQA";

	private java.lang.String pk_holiday;
	private java.lang.String pk_holidaysort;
	private java.lang.String pk_group;
	private java.lang.String pk_org;
	private java.lang.String code;
	private java.lang.String name;
	private java.lang.String name2;
	private java.lang.String name3;
	private java.lang.String name4;
	private java.lang.String name5;
	private java.lang.String name6;
	private java.lang.String holidayyear;
	private java.lang.String memo;
	private java.lang.String starttime;
	private java.lang.String endtime;
	private nc.vo.pub.lang.UFBoolean isdeftime;
	private nc.vo.pub.lang.UFLiteralDate oneswitch;
	private nc.vo.pub.lang.UFLiteralDate oneswitchto;
	private nc.vo.pub.lang.UFLiteralDate twoswitch;
	private nc.vo.pub.lang.UFLiteralDate twoswitchto;
	private nc.vo.pub.lang.UFLiteralDate threeswitch;
	private nc.vo.pub.lang.UFLiteralDate threeswitchto;
	private nc.vo.pub.lang.UFLiteralDate fourswitch;
	private nc.vo.pub.lang.UFLiteralDate fourswitchto;
	private nc.vo.pub.lang.UFLiteralDate fiveswitch;
	private nc.vo.pub.lang.UFLiteralDate fiveswitchto;
	private nc.vo.pub.lang.UFLiteralDate sixswitch;
	private nc.vo.pub.lang.UFLiteralDate sixswitchto;
	private nc.vo.pub.lang.UFLiteralDate sevenswitch;
	private nc.vo.pub.lang.UFLiteralDate sevenswitchto;
	private nc.vo.pub.lang.UFLiteralDate eightswitch;
	private nc.vo.pub.lang.UFLiteralDate eightswitchto;
	private nc.vo.pub.lang.UFBoolean allflag;
	private java.lang.String formulastr;
	private java.lang.String formula;
	private java.lang.Integer dataoriginflag;
	private java.lang.String creator;
	private nc.vo.pub.lang.UFDateTime creationtime;
	private java.lang.String modifier;
	private nc.vo.pub.lang.UFDateTime modifiedtime;
	private java.lang.Integer dr = 0;
	private nc.vo.pub.lang.UFDateTime ts;
	private nc.vo.pub.lang.UFBoolean issalary;//是否计薪

	public static final String PK_HOLIDAY = "pk_holiday";
	public static final String PK_HOLIDAYSORT = "pk_holidaysort";
	public static final String PK_GROUP = "pk_group";
	public static final String PK_ORG = "pk_org";
	public static final String CODE = "code";
	public static final String NAME = "name";
	public static final String NAME2 = "name2";
	public static final String NAME3 = "name3";
	public static final String NAME4 = "name4";
	public static final String NAME5 = "name5";
	public static final String NAME6 = "name6";
	public static final String HOLIDAYYEAR = "holidayyear";
	public static final String MEMO = "memo";
	public static final String STARTTIME = "starttime";
	public static final String ENDTIME = "endtime";
	public static final String ISDEFTIME = "isdeftime";
	public static final String ONESWITCH = "oneswitch";
	public static final String ONESWITCHTO = "oneswitchto";
	public static final String TWOSWITCH = "twoswitch";
	public static final String TWOSWITCHTO = "twoswitchto";
	public static final String THREESWITCH = "threeswitch";
	public static final String THREESWITCHTO = "threeswitchto";
	public static final String FOURSWITCH = "fourswitch";
	public static final String FOURSWITCHTO = "fourswitchto";
	public static final String FIVESWITCH = "fiveswitch";
	public static final String FIVESWITCHTO = "fiveswitchto";
	public static final String SIXSWITCH = "sixswitch";
	public static final String SIXSWITCHTO = "sixswitchto";
	public static final String SEVENSWITCH = "sevenswitch";
	public static final String SEVENSWITCHTO = "sevenswitchto";
	public static final String EIGHTSWITCH = "eightswitch";
	public static final String EIGHTSWITCHTO = "eightswitchto";
	public static final String ALLFLAG = "allflag";
	public static final String FORMULASTR = "formulastr";
	public static final String FORMULA = "formula";
	public static final String DATAORIGINFLAG = "dataoriginflag";
	public static final String CREATOR = "creator";
	public static final String CREATIONTIME = "creationtime";
	public static final String MODIFIER = "modifier";
	public static final String MODIFIEDTIME = "modifiedtime";
	public static final String ISSALARY = "issalary";

	/**
	 * 属性pk_holidaydate的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getPk_holiday () {
		return pk_holiday;
	}
	/**
	 * 属性pk_holidaydate的Setter方法.
	 * 创建日期:
	 * @param newPk_holidaydate java.lang.String
	 */
	public void setPk_holiday (java.lang.String newPk_holidaydate ) {
	 	this.pk_holiday = newPk_holidaydate;
	}
	/**
	 * 属性pk_holiday的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getPk_holidaysort () {
		return pk_holidaysort;
	}
	/**
	 * 属性pk_holiday的Setter方法.
	 * 创建日期:
	 * @param newPk_holiday java.lang.String
	 */
	public void setPk_holidaysort (java.lang.String newPk_holiday ) {
	 	this.pk_holidaysort = newPk_holiday;
	}
	/**
	 * 属性pk_group的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getPk_group () {
		return pk_group;
	}
	/**
	 * 属性pk_group的Setter方法.
	 * 创建日期:
	 * @param newPk_group java.lang.String
	 */
	public void setPk_group (java.lang.String newPk_group ) {
	 	this.pk_group = newPk_group;
	}
	/**
	 * 属性pk_org的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getPk_org () {
		return pk_org;
	}
	/**
	 * 属性pk_org的Setter方法.
	 * 创建日期:
	 * @param newPk_org java.lang.String
	 */
	public void setPk_org (java.lang.String newPk_org ) {
	 	this.pk_org = newPk_org;
	}
	/**
	 * 属性code的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getCode () {
		return code;
	}
	/**
	 * 属性code的Setter方法.
	 * 创建日期:
	 * @param newCode java.lang.String
	 */
	public void setCode (java.lang.String newCode ) {
	 	this.code = newCode;
	}
	/**
	 * 属性name的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getName () {
		return name;
	}
	/**
	 * 属性name的Setter方法.
	 * 创建日期:
	 * @param newName java.lang.String
	 */
	public void setName (java.lang.String newName ) {
	 	this.name = newName;
	}
	/**
	 * 属性name2的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getName2 () {
		return name2;
	}
	/**
	 * 属性name2的Setter方法.
	 * 创建日期:
	 * @param newName2 java.lang.String
	 */
	public void setName2 (java.lang.String newName2 ) {
	 	this.name2 = newName2;
	}
	/**
	 * 属性name3的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getName3 () {
		return name3;
	}
	/**
	 * 属性name3的Setter方法.
	 * 创建日期:
	 * @param newName3 java.lang.String
	 */
	public void setName3 (java.lang.String newName3 ) {
	 	this.name3 = newName3;
	}
	/**
	 * 属性name4的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getName4 () {
		return name4;
	}
	/**
	 * 属性name4的Setter方法.
	 * 创建日期:
	 * @param newName4 java.lang.String
	 */
	public void setName4 (java.lang.String newName4 ) {
	 	this.name4 = newName4;
	}
	/**
	 * 属性name5的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getName5 () {
		return name5;
	}
	/**
	 * 属性name5的Setter方法.
	 * 创建日期:
	 * @param newName5 java.lang.String
	 */
	public void setName5 (java.lang.String newName5 ) {
	 	this.name5 = newName5;
	}
	/**
	 * 属性name6的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getName6 () {
		return name6;
	}
	/**
	 * 属性name6的Setter方法.
	 * 创建日期:
	 * @param newName6 java.lang.String
	 */
	public void setName6 (java.lang.String newName6 ) {
	 	this.name6 = newName6;
	}
	/**
	 * 属性holidayyear的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getHolidayyear () {
		return holidayyear;
	}
	/**
	 * 属性holidayyear的Setter方法.
	 * 创建日期:
	 * @param newHolidayyear java.lang.String
	 */
	public void setHolidayyear (java.lang.String newHolidayyear ) {
	 	this.holidayyear = newHolidayyear;
	}
	/**
	 * 属性memo的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getMemo () {
		return memo;
	}
	/**
	 * 属性memo的Setter方法.
	 * 创建日期:
	 * @param newMemo java.lang.String
	 */
	public void setMemo (java.lang.String newMemo ) {
	 	this.memo = newMemo;
	}
	/**
	 * 属性starttime的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getStarttime () {
		return starttime;
	}
	/**
	 * 属性starttime的Setter方法.
	 * 创建日期:
	 * @param newStarttime java.lang.String
	 */
	public void setStarttime (java.lang.String newStarttime ) {
	 	this.starttime = newStarttime;
	}
	/**
	 * 属性endtime的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getEndtime () {
		return endtime;
	}
	/**
	 * 属性endtime的Setter方法.
	 * 创建日期:
	 * @param newEndtime java.lang.String
	 */
	public void setEndtime (java.lang.String newEndtime ) {
	 	this.endtime = newEndtime;
	}
	/**
	 * 属性isdeftime的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getIsdeftime () {
		return isdeftime;
	}
	/**
	 * 属性isdeftime的Setter方法.
	 * 创建日期:
	 * @param newIsdeftime nc.vo.pub.lang.UFBoolean
	 */
	public void setIsdeftime (nc.vo.pub.lang.UFBoolean newIsdeftime ) {
	 	this.isdeftime = newIsdeftime;
	}
	/**
	 * 属性oneswitch的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getOneswitch () {
		return oneswitch;
	}
	/**
	 * 属性oneswitch的Setter方法.
	 * 创建日期:
	 * @param newOneswitch nc.vo.pub.lang.UFLiteralDate
	 */
	public void setOneswitch (nc.vo.pub.lang.UFLiteralDate newOneswitch ) {
	 	this.oneswitch = newOneswitch;
	}
	/**
	 * 属性oneswitchto的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getOneswitchto () {
		return oneswitchto;
	}
	/**
	 * 属性oneswitchto的Setter方法.
	 * 创建日期:
	 * @param newOneswitchto nc.vo.pub.lang.UFLiteralDate
	 */
	public void setOneswitchto (nc.vo.pub.lang.UFLiteralDate newOneswitchto ) {
	 	this.oneswitchto = newOneswitchto;
	}
	/**
	 * 属性twoswitch的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getTwoswitch () {
		return twoswitch;
	}
	/**
	 * 属性twoswitch的Setter方法.
	 * 创建日期:
	 * @param newTwoswitch nc.vo.pub.lang.UFLiteralDate
	 */
	public void setTwoswitch (nc.vo.pub.lang.UFLiteralDate newTwoswitch ) {
	 	this.twoswitch = newTwoswitch;
	}
	/**
	 * 属性twoswitchto的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getTwoswitchto () {
		return twoswitchto;
	}
	/**
	 * 属性twoswitchto的Setter方法.
	 * 创建日期:
	 * @param newTwoswitchto nc.vo.pub.lang.UFLiteralDate
	 */
	public void setTwoswitchto (nc.vo.pub.lang.UFLiteralDate newTwoswitchto ) {
	 	this.twoswitchto = newTwoswitchto;
	}
	/**
	 * 属性threeswitch的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getThreeswitch () {
		return threeswitch;
	}
	/**
	 * 属性threeswitch的Setter方法.
	 * 创建日期:
	 * @param newThreeswitch nc.vo.pub.lang.UFLiteralDate
	 */
	public void setThreeswitch (nc.vo.pub.lang.UFLiteralDate newThreeswitch ) {
	 	this.threeswitch = newThreeswitch;
	}
	/**
	 * 属性threeswitchto的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getThreeswitchto () {
		return threeswitchto;
	}
	/**
	 * 属性threeswitchto的Setter方法.
	 * 创建日期:
	 * @param newThreeswitchto nc.vo.pub.lang.UFLiteralDate
	 */
	public void setThreeswitchto (nc.vo.pub.lang.UFLiteralDate newThreeswitchto ) {
	 	this.threeswitchto = newThreeswitchto;
	}
	/**
	 * 属性fourswitch的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getFourswitch () {
		return fourswitch;
	}
	/**
	 * 属性fourswitch的Setter方法.
	 * 创建日期:
	 * @param newFourswitch nc.vo.pub.lang.UFLiteralDate
	 */
	public void setFourswitch (nc.vo.pub.lang.UFLiteralDate newFourswitch ) {
	 	this.fourswitch = newFourswitch;
	}
	/**
	 * 属性fourswitchto的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getFourswitchto () {
		return fourswitchto;
	}
	/**
	 * 属性fourswitchto的Setter方法.
	 * 创建日期:
	 * @param newFourswitchto nc.vo.pub.lang.UFLiteralDate
	 */
	public void setFourswitchto (nc.vo.pub.lang.UFLiteralDate newFourswitchto ) {
	 	this.fourswitchto = newFourswitchto;
	}
	/**
	 * 属性fiveswitch的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getFiveswitch () {
		return fiveswitch;
	}
	/**
	 * 属性fiveswitch的Setter方法.
	 * 创建日期:
	 * @param newFiveswitch nc.vo.pub.lang.UFLiteralDate
	 */
	public void setFiveswitch (nc.vo.pub.lang.UFLiteralDate newFiveswitch ) {
	 	this.fiveswitch = newFiveswitch;
	}
	/**
	 * 属性fiveswitchto的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getFiveswitchto () {
		return fiveswitchto;
	}
	/**
	 * 属性fiveswitchto的Setter方法.
	 * 创建日期:
	 * @param newFiveswitchto nc.vo.pub.lang.UFLiteralDate
	 */
	public void setFiveswitchto (nc.vo.pub.lang.UFLiteralDate newFiveswitchto ) {
	 	this.fiveswitchto = newFiveswitchto;
	}
	/**
	 * 属性sixswitch的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getSixswitch () {
		return sixswitch;
	}
	/**
	 * 属性sixswitch的Setter方法.
	 * 创建日期:
	 * @param newSixswitch nc.vo.pub.lang.UFLiteralDate
	 */
	public void setSixswitch (nc.vo.pub.lang.UFLiteralDate newSixswitch ) {
	 	this.sixswitch = newSixswitch;
	}
	/**
	 * 属性sixswitchto的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getSixswitchto () {
		return sixswitchto;
	}
	/**
	 * 属性sixswitchto的Setter方法.
	 * 创建日期:
	 * @param newSixswitchto nc.vo.pub.lang.UFLiteralDate
	 */
	public void setSixswitchto (nc.vo.pub.lang.UFLiteralDate newSixswitchto ) {
	 	this.sixswitchto = newSixswitchto;
	}
	/**
	 * 属性sevenswitch的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getSevenswitch () {
		return sevenswitch;
	}
	/**
	 * 属性sevenswitch的Setter方法.
	 * 创建日期:
	 * @param newSevenswitch nc.vo.pub.lang.UFLiteralDate
	 */
	public void setSevenswitch (nc.vo.pub.lang.UFLiteralDate newSevenswitch ) {
	 	this.sevenswitch = newSevenswitch;
	}
	/**
	 * 属性sevenswitchto的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getSevenswitchto () {
		return sevenswitchto;
	}
	/**
	 * 属性sevenswitchto的Setter方法.
	 * 创建日期:
	 * @param newSevenswitchto nc.vo.pub.lang.UFLiteralDate
	 */
	public void setSevenswitchto (nc.vo.pub.lang.UFLiteralDate newSevenswitchto ) {
	 	this.sevenswitchto = newSevenswitchto;
	}
	/**
	 * 属性eightswitch的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getEightswitch () {
		return eightswitch;
	}
	/**
	 * 属性eightswitch的Setter方法.
	 * 创建日期:
	 * @param newEightswitch nc.vo.pub.lang.UFLiteralDate
	 */
	public void setEightswitch (nc.vo.pub.lang.UFLiteralDate newEightswitch ) {
	 	this.eightswitch = newEightswitch;
	}
	/**
	 * 属性eightswitchto的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFLiteralDate
	 */
	public nc.vo.pub.lang.UFLiteralDate getEightswitchto () {
		return eightswitchto;
	}
	/**
	 * 属性eightswitchto的Setter方法.
	 * 创建日期:
	 * @param newEightswitchto nc.vo.pub.lang.UFLiteralDate
	 */
	public void setEightswitchto (nc.vo.pub.lang.UFLiteralDate newEightswitchto ) {
	 	this.eightswitchto = newEightswitchto;
	}
	/**
	 * 属性allflag的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFBoolean
	 */
	public nc.vo.pub.lang.UFBoolean getAllflag () {
		return allflag;
	}
	/**
	 * 属性allflag的Setter方法.
	 * 创建日期:
	 * @param newAllflag nc.vo.pub.lang.UFBoolean
	 */
	public void setAllflag (nc.vo.pub.lang.UFBoolean newAllflag ) {
	 	this.allflag = newAllflag;
	}
	/**
	 * 属性formulastr的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getFormulastr () {
		return formulastr;
	}
	/**
	 * 属性formulastr的Setter方法.
	 * 创建日期:
	 * @param newFormulastr java.lang.String
	 */
	public void setFormulastr (java.lang.String newFormulastr ) {
	 	this.formulastr = newFormulastr;
	}
	/**
	 * 属性formula的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getFormula () {
		return formula;
	}
	/**
	 * 属性formula的Setter方法.
	 * 创建日期:
	 * @param newFormula java.lang.String
	 */
	public void setFormula (java.lang.String newFormula ) {
	 	this.formula = newFormula;
	}
	/**
	 * 属性dataoriginflag的Getter方法.
	 * 创建日期:
	 * @return java.lang.Integer
	 */
	public java.lang.Integer getDataoriginflag () {
		return dataoriginflag;
	}
	/**
	 * 属性dataoriginflag的Setter方法.
	 * 创建日期:
	 * @param newDataoriginflag java.lang.Integer
	 */
	public void setDataoriginflag (java.lang.Integer newDataoriginflag ) {
	 	this.dataoriginflag = newDataoriginflag;
	}
	/**
	 * 属性creator的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getCreator () {
		return creator;
	}
	/**
	 * 属性creator的Setter方法.
	 * 创建日期:
	 * @param newCreator java.lang.String
	 */
	public void setCreator (java.lang.String newCreator ) {
	 	this.creator = newCreator;
	}
	/**
	 * 属性creationtime的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFDateTime
	 */
	public nc.vo.pub.lang.UFDateTime getCreationtime () {
		return creationtime;
	}
	/**
	 * 属性creationtime的Setter方法.
	 * 创建日期:
	 * @param newCreationtime nc.vo.pub.lang.UFDateTime
	 */
	public void setCreationtime (nc.vo.pub.lang.UFDateTime newCreationtime ) {
	 	this.creationtime = newCreationtime;
	}
	/**
	 * 属性modifier的Getter方法.
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getModifier () {
		return modifier;
	}
	/**
	 * 属性modifier的Setter方法.
	 * 创建日期:
	 * @param newModifier java.lang.String
	 */
	public void setModifier (java.lang.String newModifier ) {
	 	this.modifier = newModifier;
	}
	/**
	 * 属性modifiedtime的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFDateTime
	 */
	public nc.vo.pub.lang.UFDateTime getModifiedtime () {
		return modifiedtime;
	}
	/**
	 * 属性modifiedtime的Setter方法.
	 * 创建日期:
	 * @param newModifiedtime nc.vo.pub.lang.UFDateTime
	 */
	public void setModifiedtime (nc.vo.pub.lang.UFDateTime newModifiedtime ) {
	 	this.modifiedtime = newModifiedtime;
	}
	/**
	 * 属性dr的Getter方法.
	 * 创建日期:
	 * @return java.lang.Integer
	 */
	public java.lang.Integer getDr () {
		return dr;
	}
	/**
	 * 属性dr的Setter方法.
	 * 创建日期:
	 * @param newDr java.lang.Integer
	 */
	public void setDr (java.lang.Integer newDr ) {
	 	this.dr = newDr;
	}
	/**
	 * 属性ts的Getter方法.
	 * 创建日期:
	 * @return nc.vo.pub.lang.UFDateTime
	 */
	public nc.vo.pub.lang.UFDateTime getTs () {
		return ts;
	}
	/**
	 * 属性ts的Setter方法.
	 * 创建日期:
	 * @param newTs nc.vo.pub.lang.UFDateTime
	 */
	public void setTs (nc.vo.pub.lang.UFDateTime newTs ) {
	 	this.ts = newTs;
	}

	/**
	  * <p>取得父VO主键字段.
	  * <p>
	  * 创建日期:
	  * @return java.lang.String
	  */
	public java.lang.String getParentPKFieldName() {
	    return null;
	}

	/**
	  * <p>取得表主键.
	  * <p>
	  * 创建日期:
	  * @return java.lang.String
	  */
	public java.lang.String getPKFieldName() {
	  return PK_HOLIDAY;
	}

	/**
	 * <p>返回表名称.
	 * <p>
	 * 创建日期:
	 * @return java.lang.String
	 */
	public java.lang.String getTableName() {
		return getDefaultTableName();
	}

	/**
	 * <p>返回表名称.
	 * <p>
	 * 创建日期:
	 * @return java.lang.String
	 */
	public static java.lang.String getDefaultTableName() {
		return "bd_holiday";
	}

    /**
	  * 按照默认方式创建构造子.
	  *
	  * 创建日期:
	  */
     public HolidayVO() {
		super();
	}

     /**
 	 * index:1,2,3,...
 	 * @param index
 	 * @return
 	 */
 	public static final String SWITCH_DAY_FIELD(int index){
 		switch(index){
 		case 1:
 			return ONESWITCH;
 		case 2:
 			return TWOSWITCH;
 		case 3:
 			return THREESWITCH;
 		case 4:
 			return FOURSWITCH;
 		case 5:
 			return FIVESWITCH;
 		case 6:
 			return SIXSWITCH;
 		case 7:
 			return SEVENSWITCH;
 		case 8:
 			return EIGHTSWITCH;
 		}
 		return null;
 	}

 	/**
	 * index:1,2,3,...
	 * @param index
	 * @return
	 */
	public static final String SWITCHTO_DAY_FIELD(int index){
		switch(index){
		case 1:
			return ONESWITCHTO;
		case 2:
			return TWOSWITCHTO;
		case 3:
			return THREESWITCHTO;
		case 4:
			return FOURSWITCHTO;
		case 5:
			return FIVESWITCHTO;
		case 6:
			return SIXSWITCHTO;
		case 7:
			return SEVENSWITCHTO;
		case 8:
			return EIGHTSWITCHTO;
		}
		return null;
	}

	/**
	 * index：1，2，3.....
	 * @param index
	 * @return
	 */
	public UFLiteralDate getSwitchDate(int index){
		switch(index){
		case 1:
			return getOneswitch();
		case 2:
			return getTwoswitch();
		case 3:
			return getThreeswitch();
		case 4:
			return getFourswitch();
		case 5:
			return getFiveswitch();
		case 6:
			return getSixswitch();
		case 7:
			return getSevenswitch();
		case 8:
			return getEightswitch();
		}
		return null;
	}

	/**
	 * index：1，2，3.....
	 * @param index
	 * @param date
	 */
	public void setSwitchDate(int index,UFLiteralDate date){
		switch(index){
		case 1:
			setOneswitch(date);
			return;
		case 2:
			setTwoswitch(date);
			return;
		case 3:
			setThreeswitch(date);
			return;
		case 4:
			setFourswitch(date);
			return;
		case 5:
			setFiveswitch(date);
			return;
		case 6:
			setSixswitch(date);
			return;
		case 7:
			setSevenswitch(date);
			return;
		case 8:
			setEightswitch(date);
			return;
		}
	}

	/**
	 * index：1，2，3.....
	 * @param index
	 * @return
	 */
	public UFLiteralDate getSwitchToDate(int index){
		switch(index){
		case 1:
			return getOneswitchto();
		case 2:
			return getTwoswitchto();
		case 3:
			return getThreeswitchto();
		case 4:
			return getFourswitchto();
		case 5:
			return getFiveswitchto();
		case 6:
			return getSixswitchto();
		case 7:
			return getSevenswitchto();
		case 8:
			return getEightswitchto();
		}
		return null;
	}

	/**
	 * index：1，2，3.....
	 * @param index
	 * @param date
	 */
	public void setSwitchToDate(int index,UFLiteralDate date){
		switch(index){
		case 1:
			setOneswitchto(date);
			return;
		case 2:
			setTwoswitchto(date);
			return;
		case 3:
			setThreeswitchto(date);
			return;
		case 4:
			setFourswitchto(date);
			return;
		case 5:
			setFiveswitchto(date);
			return;
		case 6:
			setSixswitchto(date);
			return;
		case 7:
			setSevenswitchto(date);
			return;
		case 8:
			setEightswitchto(date);
			return;
		}
	}

	public boolean isAllEnjoy(){
		//公式为空也视为所有人都享有
		return (this.getAllflag()!=null && this.getAllflag().booleanValue()) || StringUtils.isEmpty(this.getFormula());
	}

	public void setAllSwitch(List<String> list) throws BusinessException {
		if (list==null || list.size()<=0){
			clearAllSwitch();
			return;
		}
		if (list.size()%2==1){
			throw new BusinessException(ResHelper.getString("hrbd","0hrbd0134")
/*@res "排班调整不能为奇数"*/);
		}
		//修改假日时已存在的对调日期对没有存放于日历控件的对调日期列表中，会存在之前的某对
		//对调日没去做任何修改保存之后就不见了的问题，所以在清空原对调日期列表前先进行对调
		//日期列表的合并操作，另一种解决方案是把已存在的对调日期注入CalendarXPanel的valueChangeList
		//中交由日历控件来完成此合并操作的工作
		list = mergeSwitchList(this.getAllSwitch(),list);
		clearAllSwitch();
		int num = 1;
		for (int j = 0; j < list.size(); j=j+2) {
			if (num > SWITCH_COUNT()){
				throw new BusinessException(ResHelper.getString("hrbd","0hrbd0135"
/*@res "排班调整不能超过{0}对"*/, SWITCH_COUNT()+""));
			}
			String date = list.get(j);
			String dateTo = list.get(j+1);

			//剔除掉对调日和被对调日是同一天的对调（以达到用户在界面上要取消某个对调日期时把对调日选成自己即可的效果）
			if(date == null || dateTo == null || date.equals(dateTo))
				continue;

			if (date.trim().equals("") || dateTo.trim().equals("")){
				throw new BusinessException(ResHelper.getString("hrbd","0hrbd0136")
/*@res "排班调整日期不能为空"*/);
			}

			this.setSwitchDate(num, UFLiteralDate.getDate(date));
			this.setSwitchToDate(num, UFLiteralDate.getDate(dateTo));
			num++;
		}
	}

	/**
	 * 合并新旧对调日期
	 *
	 * 原则：如果旧列表中的对调日期列表中的某一个对调日或被对调日存在于新列表中那么旧列表中的这个对调失效应该剔除掉
	 * @param oldList
	 * @param newList
	 * @return
	 */
	private List<String> mergeSwitchList(List<String> oldList,List<String> newList){
		if(CollectionUtils.isEmpty(oldList)){
			return newList;
		}else if(CollectionUtils.isEmpty(newList)){
			return newList;
		}
		List<String> retList = new ArrayList<String>();
		retList.addAll(newList);
		for(int i=0;i<oldList.size();i=i+2){
			if(newList.contains(oldList.get(i)) || newList.contains(oldList.get(i+1)))
				continue;
			retList.add(oldList.get(i));
			retList.add(oldList.get(i+1));
		}

		return retList;
	}

	public List<String> getAllSwitch(){
		List<String> list = new ArrayList<String>();
		for(int i=1;i<=SWITCH_COUNT();i++){
			if(getSwitchDate(i)!=null){
				list.add(getSwitchDate(i).toString());
				list.add(getSwitchToDate(i).toString());
			}
		}
		return list;
	}

	public List<UFLiteralDate> getAllSwitchDate(){
		List<UFLiteralDate> list = new ArrayList<UFLiteralDate>();
		for(int i=1;i<=SWITCH_COUNT();i++){
			if(getSwitchDate(i)!=null){
				list.add(getSwitchDate(i));
				list.add(getSwitchToDate(i));
			}
		}
		return list;
	}

	/**
	 * 清空所有对调日期和被对调日期
	 */
	public void clearAllSwitch(){
		for(int i=1;i<=SWITCH_COUNT();i++){
			this.setSwitchDate(i, null);
			this.setSwitchToDate(i, null);
		}
	}

	/**
	 * 返回假日的最早日期和最晚日期，数组长度为2，第一个是最早，第二个是最晚
	 * @return
	 */
	public UFLiteralDate[] getEarliestLatestHolidayDate(){
		UFLiteralDate earliestDate = UFLiteralDate.getDate(starttime.substring(0, 10));
		UFLiteralDate latestDate = UFLiteralDate.getDate(endtime.substring(0, 10));
		return new UFLiteralDate[]{earliestDate,latestDate};
	}

	/**
	 * 返回假日对调的日期中最早的日期和最晚的日期。如果没有对调，返回null。如果有对调，则第一个是最早，第二个是最晚
	 * @return
	 */
	public UFLiteralDate[] getEarliestLatestSwitchDate(){
		List<String> allSwitchDataTo = new ArrayList<String>();
		for(int i=1;i<=SWITCH_COUNT();i++){
			UFLiteralDate switchDate = getSwitchDate(i);
			UFLiteralDate switchToDate = getSwitchToDate(i);
			if(switchDate != null){
				allSwitchDataTo.add(switchDate.toString());
			}
			if(switchToDate != null){
				allSwitchDataTo.add(switchToDate.toString());
			}
		}
		if(allSwitchDataTo.size() < 1){
			return null;
		}
		Collections.sort(allSwitchDataTo);

		return new UFLiteralDate[]{UFLiteralDate.getDate(allSwitchDataTo.get(0)),UFLiteralDate.getDate(allSwitchDataTo.get(allSwitchDataTo.size()-1))};
	}
	
	/**
	 * 东方本田的，对调期间比较长，使用上面的方法会导致重新排班时间非常长（若排班的人要再很多，会导致排班失败），
	 * 因此采用有几天重拍几天的方案
	 * @return
	 */
	public UFLiteralDate[] getAllSwitchDates(){
		List<String> allSwitchDataTo = new ArrayList<String>();
		for(int i=1;i<=SWITCH_COUNT();i++){
			UFLiteralDate switchDate = getSwitchDate(i);
			UFLiteralDate switchToDate = getSwitchToDate(i);
			if(switchDate != null){
				allSwitchDataTo.add(switchDate.toString());
			}
			if(switchToDate != null){
				allSwitchDataTo.add(switchToDate.toString());
			}
		}
		if(allSwitchDataTo.size() < 1){
			return null;
		}
		Collections.sort(allSwitchDataTo);
		UFLiteralDate[] switchDates = new UFLiteralDate[allSwitchDataTo.size()];
		int i=0;
		for(String date:allSwitchDataTo){
			switchDates[i] = UFLiteralDate.getDate(date);
			i++;
		}
		return switchDates;
	}
	
	/**
	 * 获取所有的假日日期和对调日期
	 * @return
	 */
	public UFLiteralDate[] getAllSwitchAndHolidayDates(){
		List<String> allSwitchDataTo = new ArrayList<String>();
		for(int i=1;i<=SWITCH_COUNT();i++){
			UFLiteralDate switchDate = getSwitchDate(i);
			UFLiteralDate switchToDate = getSwitchToDate(i);
			if(switchDate != null){
				allSwitchDataTo.add(switchDate.toString());
			}
			if(switchToDate != null){
				allSwitchDataTo.add(switchToDate.toString());
			}
		}
		
		UFLiteralDate earliestDate = UFLiteralDate.getDate(starttime.substring(0, 10));
		UFLiteralDate latestDate = UFLiteralDate.getDate(endtime.substring(0, 10));
		
		UFLiteralDate date = earliestDate;
        do
        {
        	allSwitchDataTo.add(date.toString());
            date = date.getDateAfter(1);
        }
        while (!date.after(latestDate));
		
		if(allSwitchDataTo.size() < 1){
			return null;
		}
		Collections.sort(allSwitchDataTo);
		UFLiteralDate[] allDates = new UFLiteralDate[allSwitchDataTo.size()];
		int i=0;
		for(String dateStr:allSwitchDataTo){
			allDates[i] = UFLiteralDate.getDate(dateStr);
			i++;
		}
		return allDates;
	}
	
	/**
	 * 影响的日期范围为所有假日和对调日，并不间断的前后两天
	 */
	public UFLiteralDate[] getHolidayPerhapsAffectDates(){
		UFLiteralDate[] allDates = getAllSwitchAndHolidayDates();
		if(ArrayUtils.isEmpty(allDates)){
			return null;
		}
		List<UFLiteralDate> affectDates = new ArrayList<UFLiteralDate>();
		affectDates.add(allDates[0].getDateBefore(2));
		affectDates.add(allDates[0].getDateBefore(1));
		int length = allDates.length;
		for(int i=0;i<length;i++){
			if(i==0){
				affectDates.add(allDates[i]);
				continue;
			}
			int daysAfter = allDates[i].getDaysAfter(allDates[i-1]);
			if(daysAfter == 1){
				affectDates.add(allDates[i]);
				continue;
			}
			if(daysAfter == 2){
				affectDates.add(allDates[i].getDateBefore(1));
				affectDates.add(allDates[i]);
				continue;
			}
			if(daysAfter == 3){
				affectDates.add(allDates[i].getDateBefore(2));
				affectDates.add(allDates[i].getDateBefore(1));
				affectDates.add(allDates[i]);
				continue;
			}
			if(daysAfter == 4){
				affectDates.add(allDates[i-1].getDateAfter(1));
				affectDates.add(allDates[i].getDateBefore(2));
				affectDates.add(allDates[i].getDateBefore(1));
				affectDates.add(allDates[i]);
			}
			if(daysAfter>=5){
				affectDates.add(allDates[i-1].getDateAfter(1));
				affectDates.add(allDates[i-1].getDateAfter(2));
				affectDates.add(allDates[i].getDateBefore(2));
				affectDates.add(allDates[i].getDateBefore(1));
				affectDates.add(allDates[i]);
			}
			
		}
		affectDates.add(allDates[length-1].getDateAfter(1));
		affectDates.add(allDates[length-1].getDateAfter(2));
		return affectDates.toArray(new UFLiteralDate[0]);
	}

	/**
	 * 返回此假日涉及到的日期中的最早和最晚日期，包括假日日期和对调日期
	 * @return
	 */
	public UFLiteralDate[] getEarliestLatestDate(){
		UFLiteralDate[] holidayDates = getEarliestLatestHolidayDate();
		UFLiteralDate[] switchDates = getEarliestLatestSwitchDate();
		if(ArrayUtils.isEmpty(switchDates))
			return holidayDates;
		return new UFLiteralDate[]{holidayDates[0].before(switchDates[0])?holidayDates[0]:switchDates[0],
				holidayDates[1].after(switchDates[1])?holidayDates[1]:switchDates[1]};
	}

	/**
	 * 返回一批假日涉及到的日期中的最早日期和最晚日期，包括假日日期和对调日期
	 * @param holidayCopyVOs
	 * @return
	 */
	public static UFLiteralDate[] getEarliestLatestDate(HolidayVO[] holidayDateVOs){
		if(ArrayUtils.isEmpty(holidayDateVOs))
			return null;
		UFLiteralDate[] retArray = holidayDateVOs[0].getEarliestLatestDate();
		if(holidayDateVOs.length==1)
			return retArray;
		for(int i=1;i<holidayDateVOs.length;i++){
			UFLiteralDate[] dates = holidayDateVOs[i].getEarliestLatestDate();
			if(dates[0].before(retArray[0]))
				retArray[0]=dates[0];
			if(dates[1].after(retArray[1]))
				retArray[1]=dates[1];
		}
		return retArray;
	}

	public Map<String, String> getSwitchMap(){
		//存储班别对调的map，key、value都是日期，所有对调和被对调的日期都作为key存进去了
		Map<String, String> switchMap = new HashMap<String, String>();
		for(int i=1;i<=SWITCH_COUNT();i++){
			UFLiteralDate switchDate = getSwitchDate(i);
			UFLiteralDate switchToDate = getSwitchToDate(i);
			if(switchDate!=null&&switchToDate!=null){
				switchMap.put(switchDate.toString(), switchToDate.toString());
				switchMap.put(switchToDate.toString(), switchDate.toString());
			}
		}
		return switchMap;
	}

	public String getSwitchDateTo(String switchDate){
		return getSwitchMap().get(switchDate);
	}

	/**
	 * 返回假日的时段
	 * @param timeZone
	 * @return
	 */
	public ITimeScope toTimeScope(TimeZone timeZone){
		if(isdeftime.booleanValue())
			return new DefaultTimeScope(new UFDateTime(starttime, timeZone), new UFDateTime(endtime, timeZone), false);
		else
			return new DefaultTimeScope(new UFDateTime(starttime, timeZone), new UFDateTime(endtime, timeZone), true);
			
	}

	/**
	 * 将多个假日的时段合并
	 * @param vos
	 * @param timeZone
	 * @return
	 */
	public static ITimeScope[] toTimeScopes(HolidayVO[] vos,TimeZone timeZone){
		ITimeScope[] retArray = new ITimeScope[vos.length];
		for(int i=0;i<vos.length;i++){
			retArray[i]=vos[i].toTimeScope(timeZone);
		}
		return TimeScopeUtils.mergeTimeScopes(retArray);
	}

	/**
	 * 判断两个假日的假日时段(不包括对调日期)是否完全相等
	 * @param anotherHolidayCopyVO
	 * @return
	 */
	public boolean isSameHolidayScope(HolidayVO anotherHolidayDateVO){
		if(anotherHolidayDateVO==null)
			return false;
		return starttime.equals(anotherHolidayDateVO.getStarttime())&&endtime.equals(anotherHolidayDateVO.getEndtime());
	}

	/**
	 * 判断两个假日的对调信息是否完全相等
	 * @param anotherHolidayCopyVO
	 * @return
	 */
	public boolean isSameSwithDates(HolidayVO anotherHolidayDateVO){
		if(anotherHolidayDateVO==null)
			return false;
		Map<String, String> thisSwitchMap = getSwitchMap();
		Map<String, String> anotherSwitchMap = anotherHolidayDateVO.getSwitchMap();
		return thisSwitchMap.equals(anotherSwitchMap);
	}

	/**
	 * 判断两个假日的享有条件是否完全相等
	 * @param anotherHolidayCopyVO
	 * @return
	 */
	public boolean isSameEnjoyCondition(HolidayVO anotherHolidayDateVO){
		if(anotherHolidayDateVO==null)
			return false;
		if(isAllEnjoy()&&anotherHolidayDateVO.isAllEnjoy())
			return true;
		if(isAllEnjoy()!=anotherHolidayDateVO.isAllEnjoy())
			return false;
		String thisFormula = StringUtils.isEmpty(formula)?"":formula;
		String anotherFormula = StringUtils.isEmpty(anotherHolidayDateVO.getFormula())?"":anotherHolidayDateVO.getFormula();
		return thisFormula.equals(anotherFormula);
	}

	/**
	 * 关键信息是否都一样，关键信息包括假日时段、对调信息、享有条件
	 * @param anotherHolidayCopyVO
	 * @return
	 */
	public boolean isCriticalInfoSame(HolidayVO anotherHolidayDateVO){
		return isSameHolidayScope(anotherHolidayDateVO)&&isSameSwithDates(anotherHolidayDateVO)&&isSameEnjoyCondition(anotherHolidayDateVO);
	}

	/**
	 * 获得假日名称多语文本显示到界面的名称
	 * @return
	 */
	public String getHolidayMultiLangName(){
		return MultiLangHelper.getName(this);
	}

	@Override
	public String toString(){
		return getHolidayMultiLangName();
	}
	/**
	 * 支持班别对调的对数，目前暂时支持8对
	 * @return
	 */
	public static final int SWITCH_COUNT(){
		return 8;
	};
	/**
	 * 简单判断一天的类型：周一到周五是工作日，周六日是非工作日，不考虑假日
	 * @param date
	 * @return
	 */
	public static int getSimpleWorkDayType(UFLiteralDate date){
		int weekDay = date.getWeek();
		//周一到周五是工作日，周六日是非工作日
		return weekDay>0&&weekDay<6?DAY_TYPE_WORKDAY:DAY_TYPE_NONWORKDAY;
	}
	public nc.vo.pub.lang.UFBoolean getIssalary() {
		return issalary;
	}
	public void setIssalary(nc.vo.pub.lang.UFBoolean issalary) {
		this.issalary = issalary;
	}
	
    public String getMultiLangName(){
  		return MultiLangHelper.getName(this);
  	}
     
}

