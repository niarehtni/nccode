package nc.impl.pub.ace;

import nc.bs.hrwa.incometax.ace.bp.AceIncometaxDeleteBP;
import nc.bs.hrwa.incometax.ace.bp.AceIncometaxInsertBP;
import nc.bs.hrwa.incometax.ace.bp.AceIncometaxUpdateBP;
import nc.impl.pubapp.pattern.data.bill.BillLazyQuery;
import nc.impl.pubapp.pattern.data.bill.tool.BillTransferTool;
import nc.pub.encryption.util.SalaryDecryptUtil;
import nc.pub.encryption.util.SalaryEncryptionUtil;
import nc.ui.querytemplate.querytree.IQueryScheme;
import nc.vo.hrwa.incometax.AggIncomeTaxVO;
import nc.vo.pub.BusinessException;
import nc.vo.pub.lang.UFDouble;
import nc.vo.pubapp.pattern.exception.ExceptionUtils;

public abstract class AceIncometaxPubServiceImpl {
	// 新增
	public AggIncomeTaxVO[] pubinsertBills(AggIncomeTaxVO[] clientFullVOs, AggIncomeTaxVO[] originBills)
			throws BusinessException {
		try {
			// 数据库中数据和前台传递过来的差异VO合并后的结果
			BillTransferTool<AggIncomeTaxVO> transferTool = new BillTransferTool<AggIncomeTaxVO>(clientFullVOs);
			// 调用BP
			AceIncometaxInsertBP action = new AceIncometaxInsertBP();
			AggIncomeTaxVO[] retvos = action.insert(clientFullVOs);
			// Ares.Tank 解密 2018-8-17 18:15:45
			retvos = salaryDecrypt(retvos);
			// 构造返回数据
			return transferTool.getBillForToClient(retvos);
		} catch (Exception e) {
			ExceptionUtils.marsh(e);
		}
		return null;
	}

	// 删除
	public void pubdeleteBills(AggIncomeTaxVO[] clientFullVOs, AggIncomeTaxVO[] originBills) throws BusinessException {
		try {
			// 调用BP
			// 加密 Ares.Tank 2018-8-17 19:33:31
			clientFullVOs = salaryEncrypt(clientFullVOs);
			new AceIncometaxDeleteBP().delete(clientFullVOs);
		} catch (Exception e) {
			ExceptionUtils.marsh(e);
		}
	}

	// 修改
	public AggIncomeTaxVO[] pubupdateBills(AggIncomeTaxVO[] clientFullVOs, AggIncomeTaxVO[] originBills)
			throws BusinessException {
		try {
			// 加锁 + 检查ts
			BillTransferTool<AggIncomeTaxVO> transferTool = new BillTransferTool<AggIncomeTaxVO>(clientFullVOs);
			AceIncometaxUpdateBP bp = new AceIncometaxUpdateBP();
			originBills = transferTool.getOriginBills();
			// Ares.Tank 加密比较 2018-8-17 18:15:45
			salaryEncrypt(clientFullVOs);
			AggIncomeTaxVO[] retvos = bp.update(clientFullVOs, originBills);
			// Ares.Tank 解密 2018-8-17 18:15:45
			retvos = salaryDecrypt(retvos);
			// 构造返回数据
			return transferTool.getBillForToClient(retvos);
		} catch (Exception e) {
			ExceptionUtils.marsh(e);
		}
		return null;
	}

	public AggIncomeTaxVO[] pubquerybills(IQueryScheme queryScheme) throws BusinessException {
		AggIncomeTaxVO[] bills = null;
		try {
			this.preQuery(queryScheme);
			BillLazyQuery<AggIncomeTaxVO> query = new BillLazyQuery<AggIncomeTaxVO>(AggIncomeTaxVO.class);
			bills = query.query(queryScheme, null);
			// Ares.Tank 解密 2018-8-17 18:15:45
			bills = salaryDecrypt(bills);
		} catch (Exception e) {
			ExceptionUtils.marsh(e);
		}
		return bills;
	}

	/**
	 * 对数据进行加密
	 * 
	 * @author Ares.Tank
	 * @param bills
	 * @return
	 */
	private AggIncomeTaxVO[] salaryEncrypt(AggIncomeTaxVO[] vos) {

		for (int i = 0; i < vos.length; i++) {
			if (vos[i] != null && vos[i].getParentVO() != null) {
				if (vos[i] != null) {
					if (vos[i].getParentVO().getTaxbase() != null) {
						vos[i].getParentVO().setTaxbase(
								new UFDouble(SalaryEncryptionUtil.encryption(vos[i].getParentVO().getTaxbase()
										.getDouble())));
					}
					if (vos[i].getParentVO().getCacu_value() != null) {
						vos[i].getParentVO().setCacu_value(
								new UFDouble(SalaryEncryptionUtil.encryption(vos[i].getParentVO().getCacu_value()
										.getDouble())));
					}
					if (vos[i].getParentVO().getNetincome() != null) {
						vos[i].getParentVO().setNetincome(
								new UFDouble(SalaryEncryptionUtil.encryption(vos[i].getParentVO().getNetincome()
										.getDouble())));
					}
					if (vos[i].getParentVO().getPickedup() != null) {
						vos[i].getParentVO().setPickedup(
								new UFDouble(SalaryEncryptionUtil.encryption(vos[i].getParentVO().getPickedup()
										.getDouble())));
					}
				}
			}

		}
		return vos;
	}

	/**
	 * 对数据进行解密
	 * 
	 * @author Ares.Tank
	 * @param bills
	 * @return
	 */
	private AggIncomeTaxVO[] salaryDecrypt(AggIncomeTaxVO[] vos) {

		for (int i = 0; i < vos.length; i++) {
			if (vos[i] != null && vos[i].getParentVO() != null) {
				if (vos[i] != null) {
					if (vos[i].getParentVO().getTaxbase() != null) {
						vos[i].getParentVO().setTaxbase(
								new UFDouble(SalaryDecryptUtil.decrypt(vos[i].getParentVO().getTaxbase().getDouble())));
					}
					if (vos[i].getParentVO().getCacu_value() != null) {
						vos[i].getParentVO().setCacu_value(
								new UFDouble(SalaryDecryptUtil
										.decrypt(vos[i].getParentVO().getCacu_value().getDouble())));
					}
					if (vos[i].getParentVO().getNetincome() != null) {
						vos[i].getParentVO()
								.setNetincome(
										new UFDouble(SalaryDecryptUtil.decrypt(vos[i].getParentVO().getNetincome()
												.getDouble())));
					}
					if (vos[i].getParentVO().getPickedup() != null) {
						vos[i].getParentVO()
								.setPickedup(
										new UFDouble(SalaryDecryptUtil.decrypt(vos[i].getParentVO().getPickedup()
												.getDouble())));
					}
				}
			}

		}
		return vos;
	}

	/**
	 * 由子类实现，查询之前对queryScheme进行加工，加入自己的逻辑
	 * 
	 * @param queryScheme
	 */
	protected void preQuery(IQueryScheme queryScheme) {
		// 查询之前对queryScheme进行加工，加入自己的逻辑
	}

}