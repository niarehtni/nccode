package nc.ui.overtime.otleavebalance.view;

import java.awt.Component;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.List;

import nc.bs.framework.common.NCLocator;
import nc.itf.uap.IUAPQueryBS;
import nc.jdbc.framework.processor.ColumnListProcessor;
import nc.ui.overtime.otleavebalance.action.QueryAction;
import nc.ui.overtime.otleavebalance.model.OTLeaveBalanceModeDataManager;
import nc.ui.pub.beans.UIComboBox;
import nc.ui.pub.beans.UILabel;
import nc.ui.pub.beans.UIRefPane;
import nc.ui.pub.beans.ValueChangedEvent;
import nc.ui.pub.beans.calendar.CalendarValueChangeEvent;
import nc.ui.pub.beans.calendar.ICalendarValueChangeListener;
import nc.ui.ta.pub.view.TAParamOrgPanel;
import nc.vo.pub.BusinessException;
import nc.vo.pubapp.pattern.exception.ExceptionUtils;

import org.apache.commons.lang.StringUtils;

public class OTLeaveBalanceOrgPanel extends TAParamOrgPanel implements ICalendarValueChangeListener {

	/**
	 * serial id
	 */
	private static final long serialVersionUID = 261505913090515929L;
	private UILabel lblBeginDate = null;
	private UILabel lblEndDate = null;
	private UIRefPane refBeginDate = null;
	private UIRefPane refEndDate = null;
	private QueryAction queryAction = null;
	private UILabel lblYear = null;
	private UIComboBox cboYear = null;

	@Override
	public void initUI() {
		super.initUI();
		add(new UILabel());
		add(this.getLblYear());
		add(this.getCboYear());
		add(new UILabel());
		add(this.getLblBeginDate());
		add(this.getRefBeginDate());
		add(new UILabel());
		add(this.getLblEndDate());
		add(this.getRefEndDate());

		if (!StringUtils.isEmpty(getContext().getPk_org())) {
			((OTLeaveBalanceModeDataManager) getDataManager()).initHierachicalModel();
		    // MOD 补充年度可手动输入by Andy on 2019-01-16
			//getCboYear().setEditable(true);
			
			// MOD 补充人力资源组织有值时重制年度可选单by Andy on 2019-01-16
			initYearComboBox();
			
		//	getCboYear().getButton().setVisible(false);
		//	getCboYear().getButton().getToolTipText();
		//	 getCboYear().getButton().setDefaultCapable(true);
		}
	}

	public UIComboBox getCboYear() {
		if (cboYear == null) {
			cboYear = new UIComboBox();
			cboYear.setName("cboYear");
			cboYear.setLocation(80, 6);
			cboYear.addItemListener(new ItemListener() {
				@Override
				public void itemStateChanged(ItemEvent e) {
					doYearChanged();
				}
			});
		}
		return cboYear;
	}

	public void doYearChanged() {
		if (this.getCboYear().getSelectdItemValue() != null && this.getCboYear().getSelectdItemValue().equals("")) {
			this.getLblBeginDate().setEnabled(true);
			this.getRefBeginDate().setEnabled(true);
			this.getRefBeginDate().getUITextField().setShowMustInputHint(true);
			this.getLblEndDate().setEnabled(true);
			this.getRefEndDate().setEnabled(true);
			this.getRefEndDate().getUITextField().setShowMustInputHint(true);
			this.getLblBeginDate().setVisible(true);
			this.getRefBeginDate().setVisible(true);
			this.getLblEndDate().setVisible(true);
			this.getRefEndDate().setVisible(true);
			// MOD 补充更改年度时清空列表by Andy on 2019-01-16
			((OTLeaveBalanceModeDataManager) getDataManager()).initModel(); 						
		} else {
			this.getLblBeginDate().setEnabled(false);
			this.getRefBeginDate().setEnabled(false);
			this.getRefBeginDate().getUITextField().setShowMustInputHint(false);
			this.getLblEndDate().setEnabled(false);
			this.getRefEndDate().setEnabled(false);
			this.getRefEndDate().getUITextField().setShowMustInputHint(false);
			this.getLblBeginDate().setVisible(false);
			this.getRefBeginDate().setVisible(false);
			this.getLblEndDate().setVisible(false);
			this.getRefEndDate().setVisible(false);
			// MOD 补充更改年度时清空列表by Andy on 2019-01-16
			((OTLeaveBalanceModeDataManager) getDataManager()).initModel(); 			
		}
	}

	private UILabel getLblYear() {
		if (lblYear == null) {
			lblYear = new UILabel();
			lblYear.setName("lblYear");
			lblYear.setText("年度");
		}
		return lblYear;
	}

	public UIRefPane getRefEndDate() {
		if (refEndDate == null) {
			refEndDate = new UIRefPane("日历");
			refEndDate.setName("refEndDate");
			refEndDate.getUITextField().setShowMustInputHint(true);
			refEndDate.addValueChangedListener(this);
			refEndDate.addCalendarValueChangeListener(this);
		}
		return refEndDate;
	}

	private Component getLblEndDate() {
		if (lblEndDate == null) {
			lblEndDate = new UILabel();
			lblEndDate.setName("lblEndDate");
			lblEndDate.setText("截止日期");
		}
		return lblEndDate;
	}

	public UIRefPane getRefBeginDate() {
		if (refBeginDate == null) {
			refBeginDate = new UIRefPane("日历");
			refBeginDate.setName("refBeginDate");
			refBeginDate.getUITextField().setShowMustInputHint(true);
			refBeginDate.addValueChangedListener(this);
			refBeginDate.addCalendarValueChangeListener(this);
		}
		return refBeginDate;
	}

	private Component getLblBeginDate() {
		if (lblBeginDate == null) {
			lblBeginDate = new UILabel();
			lblBeginDate.setName("lblBeginDate");
			lblBeginDate.setText("开始日期");
		}
		return lblBeginDate;
	}

	public void valueChanged(ValueChangedEvent event) {
		super.valueChanged(event);
		String pk_org = getRefPane().getRefPK();
		if (event.getSource() == getRefPane()) {
			getModel().getContext().setPk_org(pk_org);
			((OTLeaveBalanceModeDataManager) getDataManager()).initHierachicalModel();
			initYearComboBox();
		}
	}

	@SuppressWarnings("unchecked")
	private void initYearComboBox() {
		try {
			this.getCboYear().removeAllItems();
			IUAPQueryBS query = NCLocator.getInstance().lookup(IUAPQueryBS.class);
			List<String> years = (List<String>) query.executeQuery(
					"select distinct timeyear from tbm_period where pk_org = '" + getRefPane().getRefPK()
							+ "' order by timeyear;", new ColumnListProcessor());
			this.getCboYear().addItems(new String[] { "" });
			this.getCboYear().addItems(years.toArray(new String[0]));
		} catch (BusinessException e) {
			ExceptionUtils.wrappBusinessException(e.getMessage());
		}

	}

	@Override
	public void calendarValueChanged(CalendarValueChangeEvent arg0) {
		getQueryAction().updateStatus();
	}

	public QueryAction getQueryAction() {
		return queryAction;
	}

	public void setQueryAction(QueryAction queryAction) {
		this.queryAction = queryAction;
	}
}
