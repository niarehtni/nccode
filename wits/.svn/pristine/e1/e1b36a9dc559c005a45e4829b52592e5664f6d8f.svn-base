package nc.impl.wa.func_tax;

import nc.bs.dao.BaseDAO;
import nc.impl.wa.func.AbstractWAFormulaParse;
import nc.vo.hr.func.FunctionReplaceVO;
import nc.vo.hr.func.FunctionVO;
import nc.vo.hr.tools.dbtool.util.db.DBUtil;
import nc.vo.pub.BusinessException;
import nc.vo.wa.classitem.WaClassItemVO;
import nc.vo.wa.formula.IFormulaAli;
import nc.vo.wa.pub.WaLoginContext;

/**
 * Get (value)
 * 新税改_速算扣除数
 * （新税改_累计应纳税所得额 - (5000 * 发薪月数)） 根据薪资档案的税表的适用税率
 * 
 * 汇总薪资方案已经审核
 * @author: xuhw
 * @date:
 * @since: eHR V6.5
 * @走查人:
 * @走查日期:
 * @修改人:
 * @修改日期:
 */
@SuppressWarnings("serial")
public class WATaxFunTaxQuickDeductionProcesser extends AbstractWAFormulaParse
		implements IFormulaAli {


	/**
	 * @throws BusinessException
	 * @see nc.impl.wa.func.TaxfunTotalTaxAbleIncomeProcesser#getReplaceStr(java.lang.String)
	 */
	@Override
	public FunctionReplaceVO getReplaceStr(String formula)
			throws BusinessException {
		WaLoginContext context = getContext();
		String cyear = context.getCyear();
		String cperiod = context.getCperiod();

		StringBuffer sbsql = new StringBuffer();
		String[] arguments = getArguments(formula);
		FunctionReplaceVO fvo = new FunctionReplaceVO();
		String itemkey = arguments[0];
		String itemkey2 = arguments[1];
		fvo.setAliTableName("wa_data");
		StringBuffer sqlBuffer = new StringBuffer();

		// -- 统一员工 同一个人力资源组织 合并计税方案 审核过的数据的合计
		sqlBuffer.append(" 	SELECT	    ");
		sqlBuffer.append(" 		 table1.NQUICKDEBUCT   ");
		sqlBuffer.append(" 	FROM	    ");
		sqlBuffer.append(" 		(    ");
		sqlBuffer.append(" 			SELECT	 (	  ");
		sqlBuffer.append(" 					data2."+itemkey+" - data2."+itemkey2);
		sqlBuffer.append(" 				) taxbasicAmt,				    ");
		sqlBuffer.append(" 				taxtable.NMINAMOUNT,				    ");
		sqlBuffer.append(" 				taxtable.NMAXAMOUNT,				    ");
		sqlBuffer.append(" 				taxtable.NQUICKDEBUCT,				    ");
		sqlBuffer.append(" 					data2.pk_wa_data, ");
		sqlBuffer.append(" 				taxtable.NTAXRATE				    ");
		sqlBuffer.append(" 			FROM					    ");
		sqlBuffer.append(" 				wa_data data2				    ");
		sqlBuffer.append(" 			INNER JOIN WA_TAXTABLE taxtable ON data2.TAXTABLEID = taxtable.pk_wa_taxbase    ");
//		sqlBuffer.append(" 			WHERE    ");
//		sqlBuffer.append(" 				data2.pk_wa_data = wa_data.pk_wa_data		    ");
		sqlBuffer.append(" 		) table1    ");
		sqlBuffer.append(" 	WHERE	    ");
		sqlBuffer.append(" 			table1.pk_wa_data = WA_DATA.PK_WA_DATA  and table1.NMINAMOUNT < table1.taxbasicAmt    ");
		if (new BaseDAO().getDBType() == DBUtil.SQLSERVER) {
			sqlBuffer.append(" 	AND isnull (table1.NMAXAMOUNT, 9999999999) >= table1.taxbasicAmt	    ");
		} else {
			sqlBuffer.append(" 	AND NVL (table1.NMAXAMOUNT, 9999999999) >= table1.taxbasicAmt	    ");
		}
		

		 

		fvo.setReplaceStr(coalesce(sqlBuffer.toString()));

		return fvo;
	}

	@Override
	public String[] getAliItemKeys(WaClassItemVO itemVO,
			WaLoginContext context, FunctionVO functionVO)
			throws BusinessException {
		if (itemVO == null || context == null || functionVO == null
				|| itemVO.getVformula() == null) {
			return null;
		}

		setFunctionVO(functionVO);
		setContext(context);

		String[] arguments = getArguments(itemVO.getVformula());

		return arguments;
	}
	

	private String getBDSql() {
		if (new BaseDAO().getDBType() == DBUtil.SQLSERVER) {
			return "+";
		} else {
			return "||";
		}
	}
}
