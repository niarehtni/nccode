package nc.impl.wa.func_tax;

import nc.bs.dao.BaseDAO;
import nc.impl.wa.func.AbstractWAFormulaParse;
import nc.vo.hr.func.FunctionReplaceVO;
import nc.vo.hr.func.FunctionVO;
import nc.vo.hr.tools.dbtool.util.db.DBUtil;
import nc.vo.pub.BusinessException;
import nc.vo.wa.classitem.WaClassItemVO;
import nc.vo.wa.formula.IFormulaAli;
import nc.vo.wa.pub.WaLoginContext;

/**
 * Get Sum(value)
 * 新税改_累计应纳税（新税改_累计应纳税所得额）
 * （新税改_累计应纳税所得额 - (5000 * 发薪月数)） * 适用税率 - 速算扣除数
 * @author: xuhw
 * @date:
 * @since: eHR V6.5
 * @走查人:
 * @走查日期:
 * @修改人:
 * @修改日期:
 */
@SuppressWarnings("serial")
public class TaxfunTotalTaxableAmtProcesser extends AbstractWAFormulaParse
		implements IFormulaAli {

	/**
	 * @throws BusinessException
	 * @see nc.impl.wa.func.TaxfunTotalTaxAbleIncomeProcesser#getReplaceStr(java.lang.String)
	 */
	@Override
	public FunctionReplaceVO getReplaceStr(String formula)
			throws BusinessException {
		WaLoginContext context = getContext();
		String cyear = context.getCyear();
		String cperiod = context.getCperiod();

		StringBuffer sbsql = new StringBuffer();
		String[] arguments = getArguments(formula);
		FunctionReplaceVO fvo = new FunctionReplaceVO();
		String itemkey = arguments[0];
		String itemkey2 = arguments[1];
		fvo.setAliTableName("wa_data");
		StringBuffer sqlBuffer = new StringBuffer();

		
		sqlBuffer.append(" SELECT");
		if (new BaseDAO().getDBType() == DBUtil.SQLSERVER) {
			sqlBuffer.append(" 	isnull ( ( table2.taxbasicAmt2 * table2.NTAXRATE / 100 - table2.NQUICKDEBUCT  ),  0 ) taxAble  FROM  ");
		} else {
			sqlBuffer.append(" 	NVL ( ( table2.taxbasicAmt2 * table2.NTAXRATE / 100 - table2.NQUICKDEBUCT  ),  0 ) taxAble  FROM  ");
		}
		
		sqlBuffer.append(" 	(    ");
		sqlBuffer.append(" 		SELECT    ");
		sqlBuffer.append(" 			(     ");
		sqlBuffer.append(" 				CASE                 ");
		sqlBuffer.append(" 				WHEN table1.taxbasicAmt < 0 THEN");
		sqlBuffer.append(" 					0                ");
		sqlBuffer.append(" 				ELSE                 ");
		sqlBuffer.append(" 					table1.taxbasicAmt ");
		sqlBuffer.append(" 				END                  ");
		sqlBuffer.append(" 			) taxbasicAmt2,          ");
		sqlBuffer.append(" 			table1.*                 ");
		sqlBuffer.append(" 		FROM      ");
		sqlBuffer.append(" 			(     ");
		sqlBuffer.append(" 				SELECT               ");
		sqlBuffer.append(" 					(                ");
		sqlBuffer.append(" 						data2."+itemkey+"  -  data2."+itemkey2);
		sqlBuffer.append(" 					) taxbasicAmt,   ");
		sqlBuffer.append(" 					taxtable.NMINAMOUNT,        ");
		sqlBuffer.append(" 					taxtable.NMAXAMOUNT,        ");
		sqlBuffer.append(" 					taxtable.NQUICKDEBUCT,      ");
		sqlBuffer.append(" 					taxtable.NTAXRATE , ");
		sqlBuffer.append(" 					data2.pk_wa_data ");
		sqlBuffer.append(" 				FROM                 ");
		sqlBuffer.append(" 					wa_data data2    ");
		sqlBuffer.append(" 				INNER JOIN WA_TAXTABLE taxtable ON data2.TAXTABLEID = taxtable.pk_wa_taxbase   ");
		//sqlBuffer.append(" 				WHERE                ");
		//sqlBuffer.append(" 					data2.pk_wa_data = wa_data.pk_wa_data     ");
		sqlBuffer.append(" 			) table1                 ");
		sqlBuffer.append(" 	) table2      ");
		sqlBuffer.append(" WHERE ");
		sqlBuffer.append(" 	table2.pk_wa_data = WA_DATA.PK_WA_DATA and table2.NMINAMOUNT < table2.taxbasicAmt2    ");
		if (new BaseDAO().getDBType() == DBUtil.SQLSERVER) {
			sqlBuffer.append(" AND isnull (    table2.NMAXAMOUNT, 9999999999  ) >= table2.taxbasicAmt2   ");
		} else {
			sqlBuffer.append(" AND NVL (    table2.NMAXAMOUNT, 9999999999  ) >= table2.taxbasicAmt2    ");
		}

		fvo.setReplaceStr(coalesce(sqlBuffer.toString()));

		return fvo;
	}

	@Override
	public String[] getAliItemKeys(WaClassItemVO itemVO,
			WaLoginContext context, FunctionVO functionVO)
			throws BusinessException {
		if (itemVO == null || context == null || functionVO == null
				|| itemVO.getVformula() == null) {
			return null;
		}

		setFunctionVO(functionVO);
		setContext(context);

		String[] arguments = getArguments(itemVO.getVformula());

		return arguments;
	}
	
	private String getBDSql() {
		if (new BaseDAO().getDBType() == DBUtil.SQLSERVER) {
			return "+";
		} else {
			return "||";
		}
	}
}
