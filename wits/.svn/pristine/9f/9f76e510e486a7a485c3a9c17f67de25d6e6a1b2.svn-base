package nc.impl.wa.taxupgrade_tool;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import nc.bs.dao.DAOException;
import nc.hr.frame.persistence.BaseDAOManager;
import nc.hr.utils.PubEnv;
import nc.hr.utils.SQLHelper;
import nc.jdbc.framework.SQLParameter;
import nc.jdbc.framework.processor.ResultSetProcessor;
import nc.vo.hr.tools.pub.GeneralVO;
import nc.vo.pub.BusinessException;
import nc.vo.wa.category.WaClassVO;
import nc.vo.wa.item.WaItemVO;
import nc.vo.wa.payfile.PayfileVO;
import nc.vo.wa.payfile.WaDataDspVO;
//import nc.vo.wa.psntax.TaxItemCountVO;
import nc.vo.wa.psntax.TaxItemVO;
import nc.vo.wa.pub.YearPeriodSeperatorVO;
import nc.vo.wa_tax.TaxupgradeDef;

/**
 * 税改快速试试工具
 * 
 * @author: xuhw
 * @date: 2018-12-04
 * @since: eHR V6.5
 * @走查人:
 * @走查日期:
 * @修改人:
 * @修改日期:
 */
public class Taxupgrade_toolDAO extends BaseDAOManager {

	/**
	 * 查询可以升级的方案
	 * @param pk_group
	 * @param condition
	 * @return
	 * @throws DAOException
	 */
	public GeneralVO[] queryTargetClassInfo(String pk_group, String cyear, String cperiod, String unInclude_pk_wa_class)
			throws DAOException {
		
		GeneralVO[] genvos = queryUnCheckTargetClass(pk_group);
		List<GeneralVO> unApprove = new ArrayList<GeneralVO>();

		// 查询薪资数据，是否有数据审核，有审核的跳过
		if (genvos != null && genvos.length > 0) {
			for (GeneralVO vo : genvos) {
				Integer intcheck = Integer.parseInt(vo.getAttributeValue("hascheck") + "");
				if (intcheck == 0) {
					unApprove.add(vo);
				}
			}
		}
		return unApprove.toArray(new GeneralVO[0]);
	}
	/**
	 * 查询可以升级的方案
	 * @param pk_group
	 * @param condition
	 * @return
	 * @throws DAOException
	 */
	public GeneralVO[] queryUnCheckTargetClass(String pk_group) throws DAOException{
		StringBuffer sql = new StringBuffer();

		sql.append(getMainSql(pk_group));
		sql.append(" 		and	periodstate.enableflag = 'Y' AND ");
		sql.append(" 			periodstate.checkflag <> 'Y' AND ");
		// sql.append(" 			periodstate.isapporve <> 'Y' AND ");
		sql.append(" 			periodstate.payoffflag <> 'Y' ");
		sql.append(getOrder());

		SQLParameter param = new SQLParameter();
		param.addParam(pk_group);

		return executeQueryVOs(sql.toString(), param, GeneralVO.class);
		
	}
	/**
	 * 查询所有升级过的方案，包括父方案和子方案
	 * @param pk_group
	 * @param condition
	 * @return
	 * @throws DAOException
	 */
	public GeneralVO[] queryUpdatedClass(String pk_group,String condition) throws DAOException{
		StringBuffer sql = new StringBuffer();

		sql.append(getMainSql(pk_group));
		sql.append(condition);
		sql.append(getOrder());

		SQLParameter param = new SQLParameter();
		param.addParam(pk_group);

		GeneralVO[] vos = executeQueryVOs(sql.toString(), param, GeneralVO.class);
		
		List<GeneralVO> genvos = new ArrayList<GeneralVO>();
		if (vos != null && vos.length > 0) {
			for (GeneralVO vo : vos) {
				Object obj = vo.getAttributeValue("done");
				if (obj != null && (obj + "").equals("1")) {
					genvos.add(vo);
				}
			}
		}
		return genvos.toArray(new GeneralVO[0]);
		
	}
	
	public String getMainSql(String pk_group){
		StringBuffer sql = new StringBuffer();

		sql.append(" SELECT ");
		sql.append(" (	SELECT "
				+ SQLHelper.getMultiLangNameColumn("name")
				+ "  FROM org_orgs WHERE pk_org = waclass.pk_org ) orgname ,waclass.code, waclass."
				+ SQLHelper.getMultiLangNameColumn("name")
				+ " , waclass.cyear, waclass.cperiod, waclass.pk_wa_class, waclass.pk_group, waclass.pk_org, periodstate.checkflag, ");
		sql.append(" (	SELECT");
		sql.append(" 		1 ");
		sql.append(" 	FROM");
		sql.append(" 		wa_classitem ");
		sql.append(" 	WHERE ");
		sql.append(" 		pk_wa_class = waclass.pk_wa_class AND ");
		sql.append(" 		cyear = waclass.cyear AND ");
		sql.append(" 		cperiod = waclass.cperiod AND ");
		sql.append(" 		pk_wa_item IN (	SELECT ");
		sql.append(" 							pk_wa_item ");
		sql.append(" 						FROM");
		sql.append(" 							wa_item waitem ");
		sql.append(" 						WHERE");
		sql.append(" 							code = 'total_taxable_income_yz'");
		sql.append(" 		)");
		sql.append(" ) done ");
		sql.append(" ,( select count(1)  from  wa_data where  wa_data.pk_wa_class = waclass.pk_wa_class AND");
		sql.append(" 		wa_data.cyear = waclass.cyear AND");
		sql.append(" 		wa_data.cperiod = waclass.cperiod AND");
		sql.append(" 		wa_data.checkflag = 'Y' ) hascheck ");
		sql.append(" ,( select count(1)  from  wa_data where  wa_data.pk_wa_class = waclass.pk_wa_class AND");
		sql.append(" 		wa_data.cyear = waclass.cyear AND");
		sql.append(" 		wa_data.cperiod = waclass.cperiod  ) hasdata ");
		sql.append(" FROM ");
		sql.append(" wa_waclass waclass inner join wa_periodscheme periodscheme on waclass.pk_periodscheme = periodscheme.pk_periodscheme ");
		sql.append("   inner join wa_periodstate periodstate on periodstate.pk_wa_class = waclass.pk_wa_class  ");
		sql.append("  inner join wa_period period on period.pk_wa_period = periodstate.pk_wa_period and period.cyear = waclass.cyear and period.cperiod = waclass.cperiod ");
		sql.append(" WHERE ");
		sql.append(" 	waclass.pk_group = ? ");
		return sql.toString();
	}
	
	public String getOrder (){
		return " 			ORDER BY waclass.pk_org , waclass.cyear, waclass.cperiod, waclass.NAME";
	}
	
	/**
	 * 2019年所有纳税期间对应的薪资期间
	 * @param pk_wa_class
	 * @param cyear
	 * @param cperiod
	 * @return
	 * @throws BusinessException
	 */
	public YearPeriodSeperatorVO[] getTaxPeriodVO(String pkWaClassCond,String otherCond) throws BusinessException {

		StringBuffer sqlB = new StringBuffer();
		
		sqlB.append(" select distinct (wa_period.cyear||wa_period.cperiod) yearperiod ");
		sqlB.append("			  from wa_waclass ");
		sqlB.append("			  left join wa_periodscheme ");
		sqlB.append("			    on wa_waclass.pk_periodscheme = wa_periodscheme.pk_periodscheme ");
		sqlB.append("			  left join wa_period ");
		sqlB.append("			    on wa_periodscheme.pk_periodscheme = wa_period.pk_periodscheme ");
		sqlB.append("			    WHERE wa_waclass.pk_wa_class in ("+pkWaClassCond+")");
		if(StringUtils.isNotBlank(otherCond)){
			sqlB.append(otherCond);
		}
		sqlB.append(" and wa_period.taxyear='2019' order by wa_period.cyear||wa_period.cperiod asc ");
		

		YearPeriodSeperatorVO[] seperators = executeQueryVOs(sqlB.toString(), YearPeriodSeperatorVO.class);

		return seperators;
	}
	
	/**
	 * 2019年当前期间之前的未升级的薪资方案期间
	 * @param pkWaClassCond
	 * @return
	 * @throws BusinessException
	 */
	public WaClassVO[] getPrePeriodClassVO(String pkWaClassCond) throws BusinessException {

		StringBuffer sqlB = new StringBuffer();
		
		sqlB.append(" select  wa_period.cyear cyear,wa_period.cperiod cperiod,pk_wa_class ");
		sqlB.append("			  from wa_waclass ");
		sqlB.append("			  left join wa_periodscheme ");
		sqlB.append("			    on wa_waclass.pk_periodscheme = wa_periodscheme.pk_periodscheme ");
		sqlB.append("			  left join wa_period ");
		sqlB.append("			    on wa_periodscheme.pk_periodscheme = wa_period.pk_periodscheme ");
		sqlB.append("			    WHERE (wa_waclass.pk_wa_class in ("+pkWaClassCond+")");
		sqlB.append("			   or wa_waclass.pk_wa_class in (select pk_childclass from wa_inludeclass where pk_parentclass in ("+pkWaClassCond+") and cyear=wa_period.cyear and cperiod=wa_period.cperiod ))");
		sqlB.append("		and wa_period.cyear||wa_period.cperiod<wa_waclass.cyear||wa_waclass.cperiod ");
		sqlB.append(" and wa_period.taxyear='2019' order by wa_period.cyear||wa_period.cperiod asc ");
		

		WaClassVO[] classvos = executeQueryVOs(sqlB.toString(), WaClassVO.class);

		return classvos;
	}
	
	/**
	 * 为历史数据赋值应纳税所得额
	 * @param classvo
	 * @throws DAOException
	 */
	public void updatePreData(WaClassVO classvo) throws DAOException {
		StringBuffer sqlB = new StringBuffer();
		StringBuffer sqlU = new StringBuffer();
		
		sqlB.append(" select distinct itemkey from wa_item where code = '"+TaxupgradeDef.TAXITEM_CODE_TAXABLE_INCOME_YZ1+"' and pk_group='"+PubEnv.getPk_group()+"' ");
		
		WaItemVO vo = executeQueryVO(sqlB.toString(), WaItemVO.class);

		sqlU.append(" update wa_data set  "+vo.getItemkey() +"=f_4-f_6 ");
		sqlU.append("  where pk_wa_class ='"+classvo.getPk_wa_class()+"' ");
		sqlU.append("  and cyear ='"+classvo.getCyear()+"' ");
		sqlU.append("  and cperiod ='"+classvo.getCperiod()+"' ");
		
		getBaseDao().executeUpdate(sqlU.toString());

	}
	
	
	
	
	/**
	 * 查询指定方案期间的薪资档案
	 * @param attributeValue
	 * @param yearperiod
	 * @return
	 * @throws DAOException 
	 */
	public PayfileVO[] getCurrentPayfiles(String pk_wa_class,
			String yearperiod) throws DAOException {
		StringBuffer sql = new StringBuffer();
		sql.append(" select pk_wa_data, pk_psndoc,pk_psnjob,cyear,cperiod,pk_wa_class,taxorg,taxsumuid  ");
		sql.append(" from wa_data where pk_wa_class='"+pk_wa_class+"' ");
		sql.append(" and cyear||cperiod='"+yearperiod+"' ");
		return executeQueryVOs(sql.toString(), PayfileVO.class);
	}
	
	/**
	 * 查询指定期间的taxsumuid为空的薪资档案
	 * @param attributeValue
	 * @param yearperiod
	 * @return
	 * @throws DAOException 
	 */
	public PayfileVO[] getCurrentPayfilesNullUid(String pk_wa_class,
			String yearperiod) throws DAOException {
		StringBuffer sql = new StringBuffer();
		sql.append(" select pk_wa_data, pk_psndoc,pk_psnjob,cyear,cperiod,pk_wa_class,taxorg,taxsumuid  ");
		sql.append(" from wa_data where pk_wa_class in ("+pk_wa_class+") ");
		sql.append(" and cyear||cperiod='"+yearperiod+"' and taxsumuid is null");
		return executeQueryVOs(sql.toString(), PayfileVO.class);
	}
	
	/**
	 * 查询显示设置，并赋默认值
	 * @param attributeValue
	 * @param yearperiod
	 * @return
	 * @throws DAOException 
	 */
	public WaDataDspVO[] getDsp(String table,String key ,Class t) throws DAOException {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT 'Y' bshow, 'taxorg' item_key, pk_user, pk_wa_class, type ");
		sql.append(" FROM "+table+" a ");
		sql.append(" WHERE 1=1 and   not exists ");
		sql.append(" (select 1 from "+table+" b  WHERE  b.item_key='"+key+"' and a.pk_wa_class=b.pk_wa_class and a.pk_user=b.pk_user and a.type=b.type )");
		sql.append(" group by pk_user, pk_wa_class, type");
		return executeQueryVOs(sql.toString(), t);
	}
	
	/**
	 * 查询项目编码对应的itemkey
	 * @param codes 项目编码
	 * @throws DAOException 
	 */
	public Map<String,WaItemVO> getItemkey(String[] codes) throws DAOException {
		StringBuffer sql = new StringBuffer();
		String itemcodesql = "";
		for (String code : codes){
			itemcodesql = itemcodesql+ "'"+ code+"'"+",";
		}
		itemcodesql = itemcodesql.substring(0, itemcodesql.length()-1);
		
		sql.append("SELECT  code, itemkey,name,vformula,vformulastr FROM wa_item " );
		sql.append(" WHERE code in ("+itemcodesql+") and pk_group='"+PubEnv.getPk_group()+"' ");

		Map<String,WaItemVO> map4lo = (HashMap<String, WaItemVO>)getBaseDao().executeQuery(sql.toString(), new ResultSetProcessor() {
			public Object handleResultSet(ResultSet rs) throws SQLException
			{
				
				HashMap<String, WaItemVO> map4lo = new HashMap<String, WaItemVO>();
				while(rs.next())
				{
					if(!map4lo.containsKey(rs.getString(1))){
						WaItemVO item = new WaItemVO();
						item.setCode(rs.getString(1));
						item.setItemkey(rs.getString(2));
						item.setName(rs.getString(3));
						item.setVformula(rs.getString(4));
						item.setVformulastr(rs.getString(5));
						map4lo.put(rs.getString(1), item);
					}
				}
				return map4lo;
			}
		});
		
		return map4lo;
		
	}
	/**
	 * 修改公共项目公式
	 * @param totalIncomeItem
	 * @throws DAOException
	 */
	public void updateItemFormular(WaItemVO totalIncomeItem) throws DAOException {
		StringBuffer sql = new StringBuffer();
		sql.append(" update wa_item ");
		sql.append(" set vformula='"+totalIncomeItem.getVformula()+"'");
		sql.append(" , vformulastr='"+totalIncomeItem.getVformulastr()+"'");
		sql.append(" where itemkey='"+totalIncomeItem.getItemkey()+"'");
		sql.append(" and pk_group='"+PubEnv.getPk_group()+"'");
		getBaseDao().executeUpdate(sql.toString());
		
	}
	
	/**
	 * 修改发放项目公式
	 * @param totalIncomeItem
	 * @throws DAOException
	 */
	public void updateClassItemFormular(WaItemVO item) throws DAOException {
		StringBuffer sql = new StringBuffer();
		sql.append(" update wa_classitem ");
		sql.append(" set vformula='"+item.getVformula()+"'");
		sql.append(" , vformulastr='"+item.getVformulastr()+"'");
		sql.append(" where pk_wa_classitem in ");
		sql.append(" (select a.pk_wa_classitem ");
		sql.append("    from wa_classitem a ");
		sql.append("   inner join wa_waclass ");
		sql.append("      on a.pk_wa_class = wa_waclass.pk_wa_class ");
		sql.append("     and a.cyear = wa_waclass.cyear ");
		sql.append("     and a.cperiod = wa_waclass.cperiod ");
		sql.append("   WHERE a.itemkey = '"+item.getItemkey()+"' ");
		sql.append("     and a.pk_group = '"+PubEnv.getPk_group()+"' ");
		/*sql.append("     and not exists ");
		sql.append("   (select 1 ");
		sql.append("            from wa_data ");
		sql.append("           where wa_data.pk_wa_class = wa_waclass.pk_wa_class ");
		sql.append("             and wa_data.cyear = wa_waclass.cyear ");
		sql.append("             and wa_data.cperiod = wa_waclass.cperiod ");
		sql.append("             and wa_data.checkflag = 'Y' ");
		sql.append("  )");*/
		sql.append("  )");
		
		getBaseDao().executeUpdate(sql.toString());
		
	}
	
	/**
	 * 修改三个没用项目为非系统项目
	 * @throws DAOException
	 */
	public void updateDefaultFlag() throws DAOException {
		StringBuffer sql = new StringBuffer();
		sql.append(" update wa_item ");
		sql.append(" set defaultflag='N' ,category_id='' ");
		sql.append(" where code in ('"
			+TaxupgradeDef.TAXITEM_CODE_TAXABLE_INCOME_YZ1+"','"
			+TaxupgradeDef.TAXITEM_CODE_TAX_SPECIAL_DEDUCTION_YZ9+"','"
			+TaxupgradeDef.TAXITEM_CODE_TAX_SPECIAL_DEDUCTION_YZ17+"')");
		sql.append(" and pk_group='"+PubEnv.getPk_group()+"'");
		getBaseDao().executeUpdate(sql.toString());
		
		sql = new StringBuffer();
		sql.append(" update wa_classitem ");
		sql.append(" set category_id='' ");
		sql.append(" where itemkey in (select itemkey from wa_item where code in ('"
			+TaxupgradeDef.TAXITEM_CODE_TAXABLE_INCOME_YZ1+"','"
			+TaxupgradeDef.TAXITEM_CODE_TAX_SPECIAL_DEDUCTION_YZ9+"','"
			+TaxupgradeDef.TAXITEM_CODE_TAX_SPECIAL_DEDUCTION_YZ17+"') and pk_group='"+PubEnv.getPk_group()+"' )");
		sql.append(" and pk_group='"+PubEnv.getPk_group()+"'");
		getBaseDao().executeUpdate(sql.toString());
		
	}
	
	/**
	 * 查询已升级的薪资方案下的item
	 * @return
	 * @throws DAOException 
	 */
	/*public TaxItemCountVO[] querytaxitem(String pk_group) throws DAOException {
		
		StringBuffer sql = new StringBuffer();
		sql.append(" SELECT pk_group,pk_org,pk_wa_class ,count(pk_wa_taxitem) count");
		sql.append("   FROM wa_taxitem WHERE ");
		sql.append("   pk_wa_class in");
		sql.append("        (select distinct classitem.pk_wa_class");
		sql.append("           from wa_classitem classitem");
		sql.append("          inner join wa_item item");
		sql.append("             on item.itemkey = classitem.itemkey");
		sql.append("             and item.pk_group = classitem.pk_group");
		sql.append("          where item.code = 'total_taxable_income_yz' and item.pk_group='"+PubEnv.getPk_group()+"') and");
		sql.append("           pk_group='"+pk_group+"'");
		sql.append("          group by pk_group,pk_org,pk_wa_class");
		
		
		return executeQueryVOs(sql.toString(), TaxItemCountVO.class);
	}*/
	
	/**
	 * 查询全局预制
	 * @return
	 * @throws DAOException 
	 */
	public TaxItemVO[] querytaxitem() throws DAOException {
		
		StringBuffer sql = new StringBuffer();
		sql.append(" SELECT * ");
		sql.append("   FROM wa_taxitem ");
		sql.append("  where  pk_group='GLOBLE00000000000000'");
		return executeQueryVOs(sql.toString(), TaxItemVO.class);
	}

	
	
}
