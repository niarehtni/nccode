package nc.ui.ta.teamcalendar.view.circularlyarrange;

import java.util.List;
import java.util.Map;

import nc.bs.framework.common.NCLocator;
import nc.hr.utils.StringPiecer;
import nc.itf.ta.IPsnCalendarManageValidate;
import nc.itf.ta.ITeamCalendarManageMaintain;
import nc.itf.uap.IUAPQueryBS;
import nc.jdbc.framework.processor.MapListProcessor;
import nc.pubitf.para.SysInitQuery;
import nc.ui.hr.uif2.model.HRWizardModel;
import nc.ui.pub.beans.MessageDialog;
import nc.ui.pub.beans.wizard.IWizardDialogListener;
import nc.ui.pub.beans.wizard.WizardActionException;
import nc.ui.pub.beans.wizard.WizardEvent;
import nc.ui.ta.teamcalendar.model.TeamCalendarAppModel;
import nc.vo.bd.team.team01.entity.TeamHeadVO;
import nc.vo.logging.Debug;
import nc.vo.pub.BusinessException;
import nc.vo.pub.lang.UFBoolean;
import nc.vo.pub.lang.UFLiteralDate;
import nc.vo.ta.teamcalendar.TeamInfoCalendarVO;

public class CircularlyArrangeWizardListener implements IWizardDialogListener {

	@Override
	public void wizardFinish(WizardEvent event) throws WizardActionException {
		HRWizardModel wizardModel = (HRWizardModel)event.getModel();
		//取出日期范围
		SelectTeamStep step1 = (SelectTeamStep)wizardModel.getSteps().get(0);
		SelectTeamPanel panel1 = step1.getTeamPanel();
		UFLiteralDate beginDate = panel1.getBeginDate();
		UFLiteralDate endDate = panel1.getEndDate();
		String pk_org = panel1.getPK_BU();
		//取出“是否覆盖已有班次”
		boolean isOverride = panel1.isOverride();
		//取出班组主键
		ConfirmTeamStep step2 = (ConfirmTeamStep)wizardModel.getSteps().get(1);
		ConfirmTeamPanel panel2 = step2.getTeamPanel();
		TeamHeadVO[] teamVOs = panel2.getSelTeamVOs();
		String[] pk_teams = StringPiecer.getStrArray(teamVOs, TeamHeadVO.CTEAMID);
		//取出遇假日排班取消标志
		ShiftSetStep step3 = (ShiftSetStep)wizardModel.getSteps().get(2);
		ShiftSetPanel panel3 = step3.getShiftSetPanel();
		boolean isHolidayCancel = panel3.isHolidayCancel();
		//取出班次主键
		String[] pk_shifts = panel3.getCircularPks();
		ITeamCalendarManageMaintain manageMaintain = NCLocator.getInstance().lookup(ITeamCalendarManageMaintain.class);
		IPsnCalendarManageValidate manageValidate = NCLocator.getInstance().lookup(IPsnCalendarManageValidate.class);
		TeamInfoCalendarVO[] calendarVOs = null;
		//获取法人组织
		 IUAPQueryBS iUAPQueryBS = (IUAPQueryBS)NCLocator.getInstance().lookup(IUAPQueryBS.class.getName());   
		try {
			String legal_pk_org = null;
			List<Map<String,String>> legal_pk_orgs = (List<Map<String,String>>) iUAPQueryBS. executeQuery("select legal_pk_org from org_leaglorg_mapping where pk_org='"+wizardModel.getModel().getContext().getPk_org()+"'",new MapListProcessor());
			legal_pk_org = legal_pk_orgs.get(0).get("legal_pk_org");
			//IHRHolidayQueryService
			//在页面做一个弹出框
			List<String> strMessage = manageValidate.teamvalidate(wizardModel.getModel().getContext().getPk_org(),pk_teams, beginDate, endDate);
			UFBoolean isStrcheck = SysInitQuery.getParaBoolean(legal_pk_org, "TWHRT03");
			if(null != strMessage ){
				for(String strs : strMessage){
					if(isStrcheck.booleanValue()){
						//严格校验（有错误则取消保存）
						MessageDialog.showHintsDlg(wizardModel.getModel().getContext().getEntranceUI(), "校验", "以下员工"+strs);
						return;
					} else {
						//非严格校验（页面弹出一个框提醒用户哪些人不符合一例一休，然用户自己选择是否继续保存）
						if( 2 == MessageDialog.showOkCancelDlg(wizardModel.getModel().getContext().getEntranceUI(), "校验", "以下员工"+strs+"是否继续保存?")){
							return;
						}
						
					}
				}
				
			}	
			
			calendarVOs = manageMaintain.circularArrange(pk_org, pk_teams, beginDate, endDate, pk_shifts,isHolidayCancel, isOverride,true);
		} catch (BusinessException e) {
			Debug.error(e.getMessage(), e);
			WizardActionException wae = new WizardActionException(e);
			wae.addMsg("1", e.getMessage());
			throw wae;
		}
		TeamCalendarAppModel appModel = (TeamCalendarAppModel)wizardModel.getModel();
		appModel.setBeginEndDate(beginDate, endDate);
		appModel.initModel(calendarVOs);
		event.getModel().gotoStepForwardNoValidate(0);
	}

	@Override
	public void wizardCancel(WizardEvent event) throws WizardActionException {}
	@Override
	public void wizardFinishAndContinue(WizardEvent event)throws WizardActionException {}

}
