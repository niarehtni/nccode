package nc.pubitf.twhr.utils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;


import nc.bs.framework.common.NCLocator;
import nc.hr.utils.InSQLCreator;
import nc.itf.uap.IUAPQueryBS;
import nc.jdbc.framework.processor.MapListProcessor;
import nc.md.model.MetaDataException;
import nc.md.persist.framework.IMDPersistenceQueryService;

import nc.md.persist.framework.MDPersistenceService;

import nc.vo.org.OrgVO;
import nc.vo.logging.Debug;
import nc.vo.pub.BusinessException;
import nc.vo.pub.lang.UFBoolean;

/**
 * 
 * 法人组织工具类,此类前后端均可以用
 * 
 * @author Ares.Tank
 * @date 2018-9-18 10:47:47
 */
public class LegalOrgUtilsEX {
	// 组织信息
	private static Map<String, OrgDTO> orgMap;

	/**
	 * 获取这些哥们儿的法人组织
	 * 
	 * @param psndoc
	 * @return Map<psndoc,pk_org>
	 */
	@SuppressWarnings("unchecked")
	public static Map<String, String> getLegalOrgByPsndoc(String[] psndocs) {
		if (null == psndocs || psndocs.length <= 0) {
			return new HashMap<>();
		}
		InSQLCreator isc = new InSQLCreator();
		String psndocSql;
		try {
			psndocSql = isc.getInSQL(psndocs);
		} catch (BusinessException e1) {
			Debug.debug(e1.getMessage());
			return new HashMap<>();
		}
		String sqlStr = "select bd_psndoc.pk_psndoc,bd_psndoc.pk_org " + "from bd_psndoc " + "WHERE pk_psndoc in ("
				+ psndocSql + ") ";

		List<Map<String, String>> pkOrgMapList;
		try {
			IUAPQueryBS iUAPQueryBS = (IUAPQueryBS) NCLocator.getInstance().lookup(IUAPQueryBS.class.getName());

			pkOrgMapList = (List<Map<String, String>>) iUAPQueryBS.executeQuery(sqlStr, new MapListProcessor());
		} catch (BusinessException e) {
			Debug.debug(e.getMessage());
			return new HashMap<>();
		}
		if (pkOrgMapList != null && pkOrgMapList.size() > 0) {
			// 所有的要查询的组织
			Set<String> orgSet = new HashSet<>();
			// map<psndoc,pk_org>
			Map<String, String> resultMap = new HashMap<>();

			for (Map<String, String> psnOrgMap : pkOrgMapList) {
				if (psnOrgMap != null && psnOrgMap.get("pk_psndoc") != null && psnOrgMap.get("pk_org") != null) {
					resultMap.put(psnOrgMap.get("pk_psndoc"), psnOrgMap.get("pk_org"));
					orgSet.add(psnOrgMap.get("pk_org"));
				}
			}
			// 查询组织对应的法人组织 map<组织,法人组织>
			Map<String, String> orgToLegalOrgMap = getLegalOrgByOrgs(orgSet.toArray(new String[0]));
			if (orgToLegalOrgMap != null && orgToLegalOrgMap.size() > 0) {
				for (Map.Entry<String, String> entry : resultMap.entrySet()) {
					// 将法人组织与人员对应
					resultMap.put(entry.getKey(), orgToLegalOrgMap.get(entry.getValue()));
				}
			}
			return resultMap;
		}
		return new HashMap<>();

	}

	/**
	 * 获取本组织的法人组织,如果本身是法人组织,那么就返回本身, 如果不是,那么查找上级,返回关系最近的法人组织
	 * 
	 * @param pkOrg
	 * @return<组织pk,法人组织pk>
	 */

	public static Map<String, String> getLegalOrgByOrgs(String[] pkOrgs) {
		Map<String, String> resultMap = new HashMap<>();
		if (null == pkOrgs || pkOrgs.length <= 0) {
			return resultMap;
		}

		// 先去重,不过好像没什么意义
		Set<String> pkOrgsSet = new HashSet<>(Arrays.asList(pkOrgs));
		// 初始化组织信息
		initOrgInfo();
		// 查找组织的法人组织
		for (String pkOrg : pkOrgsSet) {
			resultMap.put(pkOrg, findLegalOrg(pkOrg));
		}

		return resultMap;
	}

	/**
	 * 获取人力资源组织下的所有法人组织
	 * 
	 * @param pkOrgs 人力资源组织
	 * @param pkGoup
	 *            当前登录用户的所属的集团 用于权限的校验
	 * @return <pk_hrorg>
	 */
	@SuppressWarnings("unchecked")
	public static Set<String> getOrgsByLegal(String pkOrg, String pkGroup) {
		Set<String> resultSet = new HashSet<>();
		if (null == pkOrg || null == pkGroup) {
			return resultSet;
		}
		// 先查询当前用户所有查看组织的权限
		String sqlStr = " select pk_hrorg from org_hrorg " + " where  pk_group = '" + pkGroup + "' ";
		List<Map<String, String>> mapList;
		Set<String> authorityOrgSet = new HashSet<>();
		try {
			IUAPQueryBS iUAPQueryBS = (IUAPQueryBS) NCLocator.getInstance().lookup(IUAPQueryBS.class.getName());
			mapList = (List<Map<String, String>>) iUAPQueryBS.executeQuery(sqlStr, new MapListProcessor());
		} catch (BusinessException e) {
			Debug.debug(e.getMessage());
			mapList = new ArrayList<>();
		}
		if (null != mapList && mapList.size() > 0) {
			// 
			orgMap = new HashMap<>();

			for (Map<String, String> map : mapList) {
				if (null != map.get("pk_hrorg")) {
					authorityOrgSet.add((String) map.get("pk_hrorg"));

				}
			}
		}

		// 查询人力资源组织下的所有法人组织信息
		sqlStr = "select pk_org from org_orgs " + " where innercode like (select innercode from org_orgs "
				+ " where org_orgs.pk_org = '" + pkOrg + "') + '%' " + " and dr = 0 and org_orgs.orgtype2 = 'Y' ";

		try {
			IUAPQueryBS iUAPQueryBS = (IUAPQueryBS) NCLocator.getInstance().lookup(IUAPQueryBS.class.getName());
			mapList = (List<Map<String, String>>) iUAPQueryBS.executeQuery(sqlStr, new MapListProcessor());
		} catch (BusinessException e) {
			Debug.debug(e.getMessage());
			mapList = new ArrayList<>();
		}
		if (null != mapList && mapList.size() > 0) {
			// 
			orgMap = new HashMap<>();

			for (Map<String, String> map : mapList) {
				if (null != map.get("pk_org") && authorityOrgSet.contains(map.get("pk_org"))) {
					resultSet.add(map.get("pk_org"));
				}
			}
		}
		return resultSet;
	}
	/**
	 * 查询组织信息
	 * @param pkOrg
	 * @return
	 * @throws MetaDataException 
	 */
	@SuppressWarnings("unchecked")
	public static Map<String,OrgVO> getOrgInfo (String[] pkOrg) throws MetaDataException{
		Map<String,OrgVO> resultMap  = new HashMap<>();
		IMDPersistenceQueryService service = MDPersistenceService.lookupPersistenceQueryService();
		List<OrgVO> restList  = (List<OrgVO>)service.queryBillOfVOByPKs(OrgVO.class, pkOrg, false);
		for(OrgVO ov :restList){
			resultMap.put(ov.getPk_org(),ov);
		}
		return resultMap;
	}
	/**
	 * 初始化组织信息,用于查出法人组织
	 */
	@SuppressWarnings("unchecked")
	private static void initOrgInfo() {
		String sqlStr = "select org_orgs.pk_org,org_orgs.pk_fatherorg,orgtype2 " + "from org_orgs where dr=0 ";
		List<Map<String, Object>> mapList;
		try {
			IUAPQueryBS iUAPQueryBS = (IUAPQueryBS) NCLocator.getInstance().lookup(IUAPQueryBS.class.getName());
			mapList = (List<Map<String, Object>>) iUAPQueryBS.executeQuery(sqlStr, new MapListProcessor());
		} catch (BusinessException e) {
			Debug.debug(e.getMessage());
			mapList = new ArrayList<>();
		}
		if (null != mapList && mapList.size() > 0) {
			// 封装一下数据结果,用来查询信息,<pk_org,orgdto>
			orgMap = new HashMap<>();

			for (Map<String, Object> map : mapList) {
				if (null != map.get("pk_org")) {
					OrgDTO temp = new OrgDTO();
					temp.setPkOrg((String) map.get("pk_org"));
					temp.setPkFatherOrg((String) map.get("pk_fatherorg"));
					temp.setLegalOrg(new UFBoolean((String) map.get("orgtype2")).booleanValue());

					orgMap.put(temp.getPkOrg(), temp);
				}
			}
		}
	}

	/**
	 * 向上查找此组织的法人组织
	 * 
	 * @param pkOrg
	 * @param orgMap
	 * @return 法人组织pk
	 */
	private static String findLegalOrg(String pkOrg) {

		if (null == orgMap || null == orgMap.get(pkOrg)) {
			return null;
		}
		// 当前组织为法人组织则返回
		if (orgMap.get(pkOrg).isLegalOrg()) {
			return pkOrg;
		}
		// 如果当前组织没有父组织,而且不是法人组织,说明没有所属的法人组织
		if (null == orgMap.get(pkOrg).getPkFatherOrg()) {
			return null;
		}
		// 否则查找上级组织
		return findLegalOrg(orgMap.get(pkOrg).getPkFatherOrg());
	}
	

}

// 临时封装一下递归所需的数据结构
class OrgDTO {
	// 组织pk
	private String pkOrg;
	// 父组织的pk
	private String pkFatherOrg;
	// 是否是法人组织
	private boolean isLegalOrg;

	public String getPkOrg() {
		return pkOrg;
	}

	public void setPkOrg(String pkOrg) {
		this.pkOrg = pkOrg;
	}

	public String getPkFatherOrg() {
		return pkFatherOrg;
	}

	public void setPkFatherOrg(String pkFatherOrg) {
		this.pkFatherOrg = pkFatherOrg;
	}

	public boolean isLegalOrg() {
		return isLegalOrg;
	}

	public void setLegalOrg(boolean isLegalOrg) {
		this.isLegalOrg = isLegalOrg;
	}

}
