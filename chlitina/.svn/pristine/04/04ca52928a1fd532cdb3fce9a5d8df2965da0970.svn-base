package nc.impl.ta.psndoc.listener;

import java.util.List;

import nc.bs.dao.BaseDAO;
import nc.bs.framework.common.NCLocator;
import nc.itf.om.IAOSQueryService;
import nc.itf.ta.ITBMPsndocManageMaintain;
import nc.itf.ta.ITBMPsndocQueryMaintain;
import nc.itf.ta.ITimeRuleQueryService;
import nc.plugin.hi.IPsndocIntoDoc;
import nc.vo.bc.pub.util.SysParaInitQuery;
import nc.vo.hi.psndoc.PsnJobVO;
import nc.vo.hi.psndoc.PsndocVO;
import nc.vo.org.DeptVO;
import nc.vo.org.OrgVO;
import nc.vo.pub.BusinessException;
import nc.vo.pub.VOStatus;
import nc.vo.pub.lang.UFLiteralDate;
import nc.vo.ta.psndoc.TBMPsndocCommonValue;
import nc.vo.ta.psndoc.TBMPsndocVO;
import nc.vo.ta.timerule.TimeRuleVO;

import org.apache.commons.lang.ArrayUtils;

/**
 * 转入人员档案添加该人员考勤档案记录,添加失败也不再回滚到人员信息管理 要处理批量操作
 */

public class PsnChangeEventExpoint implements IPsndocIntoDoc{

	//private ITBMPsndocQueryMaintain  manageMaintain;
	
	public void afterPsnIntoDoc(PsnJobVO[] before, PsnJobVO[] after,String[] pkHrorg) throws BusinessException {
		afterPsnIntoDoc(null,before,after,pkHrorg);
	}
	
	@Override
	public void afterPsnIntoDoc(PsndocVO[] psndocvos,PsnJobVO[] before, PsnJobVO[] after,String[] pkHrorg) throws BusinessException {
			// 转入人员档案是否需要进行考勤
		//	boolean needToTBMpsndoc = true;
			//只对转入人员档案后进行新增考勤档案
			if(ArrayUtils.isEmpty(after)) {
				return;
			}else{
				for(int i=0;i<after.length;i++){
					// 转入人员档案是否需要进行考勤：0：是，1：否
					//Integer needToTBMPsndocInt = SysInitQuery.getParaInt(pkHrorg[i],ITaParaConst.PARA_NEEDTO_PSNDOC);
					Integer needToTBMPsndocInt = null;
//						SysInitQuery.getParaInt(pkHrorg[i],TBMPsndocCommonValue.PARA_NEEDTO_PSNDOC);
					//2013-06-17修改问题，如入职在hr组织A,工作信息在hr组织B，此处的psnjobvo中pk_hrog是A组织，pk_org是B组织，但是考勤档案是应该加入B组织的
					String pk_org = after[i].getPk_org();
					OrgVO  hrorg = NCLocator.getInstance().lookup(IAOSQueryService.class).queryHROrgByOrgPK(pk_org);
					String pk_hrorg = hrorg.getPk_org();
//					TimeRuleVO timerulevo = NCLocator.getInstance().lookup(ITimeRuleQueryService.class).queryByOrg(pkHrorg[i]);
					TimeRuleVO timerulevo = NCLocator.getInstance().lookup(ITimeRuleQueryService.class).queryByOrg(pk_hrorg);
					if(timerulevo!=null)
						needToTBMPsndocInt = timerulevo.getTotbmpsntype();
					//needToTBMpsndoc = needToTBMPsndocInt == null ? true: (needToTBMPsndocInt == 0 ? true : false);
					//if (!needToTBMpsndoc)
					//	continue;
					
					if(needToTBMPsndocInt==null||needToTBMPsndocInt==0)//默认和为0时都表示不考勤
						continue;
					else
					addTBMPsndoc(psndocvos,after[i], null,needToTBMPsndocInt,pk_hrorg);
				}
			}
//		catch(Throwable e){
//			//因为异常抛出此方法后，在控制台和nclogs中找不到错误日志，因此出错后不能定位问题。为了
//			//解决此问题，在这里catch异常，打印日志，然后再抛出。打印的错误日志可以在nc-log.log中找到
//			Logger.error(e.getMessage(), e);
//			if(e instanceof Error)
//				throw (Error)e;
//			if(e instanceof BusinessException)
//				throw (BusinessException)e;
//			throw new BusinessException(e.getMessage(), e);
//		}
	}

	/**
	 * 新增工作记录
	 * 
	 * @param psnJobVO
	 * @param tbmpsndocBeginDate
	 *            ：考勤档案开始日期
	 * @param pk_hrorg 
	 * @throws BusinessException
	 */
	private void addTBMPsndoc(PsndocVO[] psndocvos,PsnJobVO psnJobVO,
			UFLiteralDate tbmpsndocBeginDate,Integer tbmprop, String pk_hrorg) throws BusinessException {
		TBMPsndocVO psndocvo = getPsndocVOByPsnJob(psnJobVO,tbmpsndocBeginDate,pk_hrorg);
		if(psndocvo == null)
			return;
		
		if(tbmprop==1)//手工考勤
			psndocvo.setTbm_prop(TBMPsndocCommonValue.PROP_MANUAL);
		if(tbmprop==2)//机器考勤
			psndocvo.setTbm_prop(TBMPsndocCommonValue.PROP_MACHINE);
		getITBMPsndocManageMaintain().insert(psndocvos,psndocvo,psnJobVO, true,true);
	}
	

	/**
	 * 根据工作记录创建考勤档案记录
	 * @param psnJobVO
	 * @param tbmpsndocBeginDate ：考勤档案开始日期
	 * @param pk_hrorg 
	 * @return
	 */
	private TBMPsndocVO getPsndocVOByPsnJob(PsnJobVO psnJobVO,UFLiteralDate tbmpsndocBeginDate, String pk_hrorg) {
		if(psnJobVO.getPk_psndoc() == null || psnJobVO.getPk_psnjob() == null)
			return null;
		TBMPsndocVO psndocvo = new TBMPsndocVO();
		psndocvo = getTBMPsndocByPsnjob(psnJobVO, psndocvo,tbmpsndocBeginDate,pk_hrorg);
		psndocvo.setStatus(VOStatus.NEW);
		return psndocvo;
	}
	/**
	 * 根据工作记录信息设置考勤档案信息
	 * @param psnJobVO
	 * @param psndocvo
	 * @param tbmpsndocBeginDate ：考勤档案开始日期
	 * @param pk_hrorg 
	 * @return
	 */
	private TBMPsndocVO getTBMPsndocByPsnjob(PsnJobVO psnJobVO, TBMPsndocVO psndocvo,UFLiteralDate tbmpsndocBeginDate, String pk_hrorg) {
		//by he
		//by he查找参数TWHRT05/TWHRT04/TWHRT12/TWHRT13
		BaseDAO bsDao = new BaseDAO();
		String twhrt04 = null;
		String twhrt05 = null;
		String twhrt12 = null;
		String twhrt13 = null;
		String weekform = null;
		String overtimecontrol = null;
		try{
			twhrt04 = SysParaInitQuery.getParaString(pk_hrorg, "TWHRT04");
			twhrt05 = SysParaInitQuery.getParaString(pk_hrorg, "TWHRT05");
			twhrt12 = SysParaInitQuery.getParaString(pk_hrorg, "TWHRT12");
			twhrt13 = SysParaInitQuery.getParaString(pk_hrorg, "TWHRT13");
		
			if(null != twhrt05){
				if(twhrt05.equals("0")){
					weekform = twhrt04;
				}else if (twhrt05.equals("1")){
					List<DeptVO> orgList = (List<DeptVO>) bsDao.retrieveByClause(DeptVO.class,
							"pk_dept='"+psnJobVO.getPk_dept()+"'");
					if(orgList.size() > 0){
						weekform =orgList.get(0).getAttributeValue("weekform") == null ? null : (String) orgList.get(0).getAttributeValue("weekform");
					}
				}else{
					weekform = null;
				}
			}
			if(null != twhrt12){
				if(twhrt12.equals("0")){
					overtimecontrol = twhrt13;
				}else if (twhrt12.equals("1")){
					List<DeptVO> orgList = (List<DeptVO>) bsDao.retrieveByClause(DeptVO.class,
							"pk_dept='"+psnJobVO.getPk_dept()+"'");
					if(orgList.size() > 0){
						overtimecontrol =orgList.get(0).getAttributeValue("overtimecontrol") == null ? null : (String) orgList.get(0).getAttributeValue("overtimecontrol");
					}
				}else{
					overtimecontrol = null;
				}
			}

		}catch(BusinessException e){
				e.printStackTrace();
		}
		psndocvo.setPk_psndoc(psnJobVO.getPk_psndoc());
		psndocvo.setPk_psnjob(psnJobVO.getPk_psnjob());
		psndocvo.setPk_group(psnJobVO.getPk_group());
//		psndocvo.setPk_org(psnJobVO.getPk_hrorg());//  2013-06-17此处有问题，如入职在hr组织A,工作信息在hr组织B，此处的psnjobvo中pk_hrog是A组织，pk_org是B组织，但是考勤档案是应该加入B组织的
		psndocvo.setPk_org(pk_hrorg);
		psndocvo.setPk_psnorg(psnJobVO.getPk_psnorg());
//		psndocvo.setPk_adminorg(psnJobVO.getPk_hrorg());//设置其管理组织
		psndocvo.setPk_adminorg(pk_hrorg);//设置其管理组织
		//by he
		psndocvo.setWeekform(weekform == null ? 0 : Integer.parseInt(weekform));
		psndocvo.setOvertimecontrol(overtimecontrol == null ? 0 : Integer.parseInt(overtimecontrol));
		
		//如果没有开始日期，则取员工入职日期
		psndocvo.setBegindate(tbmpsndocBeginDate==null?
				psnJobVO.getBegindate()
				:tbmpsndocBeginDate);
		if(psndocvo.getBegindate() == null) {
			psndocvo.setBegindate(new UFLiteralDate());
		}
		psndocvo.setEnddate(UFLiteralDate.getDate(TBMPsndocCommonValue.END_DATA));
		//机器考勤
		psndocvo.setTbm_prop(TBMPsndocCommonValue.PROP_MACHINE);
		return psndocvo;
	}

	
	/**
	 * 查询人员未完的考勤档案记录
	 * @param pk_psndoc
	 * @throws BusinessException 
	 */
	public ITBMPsndocQueryMaintain getManageMaintain() {
		return NCLocator.getInstance().lookup(ITBMPsndocQueryMaintain.class);
	}
	
	public ITBMPsndocManageMaintain getITBMPsndocManageMaintain(){
		return NCLocator.getInstance().lookup(ITBMPsndocManageMaintain.class);
	}
}
